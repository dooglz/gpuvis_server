//#define REGS(...) std::vector<uint8_t>({__VA_ARGS__})
//#define OP(opcode, type, branch, ticks, help, r, w){ #opcode, opcode, type, branch,
// ticks, #help, r, w }
#include "isa.h"
namespace isa {

  enum ISAe {
  NOP,
  s_buffer_load_dwordx2,
  s_bfe_u32,
  s_mov_b32,
  s_add_u32,
  s_addc_u32,
  v_mov_b32,
  flat_store_byte,
  s_waitcnt,
  s_endpgm,
  s_load_dword,
  s_load_dwordx2,
  v_mov_b32_e32,
  global_store_dwordx2,
  global_store_dword,
  global_store_short,
  global_store_dwordx4,
  s_and_b32,
  s_mul_i32,
  v_add_u32_e32,
  v_add_co_u32_e32,
  v_xor_b32_e32,
  v_cmp_gt_u32_e32,
  s_and_saveexec_b64,
  s_cbranch_execz,
  s_xor_b64,
  v_or_b32_e32,
  v_and_b32_e32,
  v_not_b32_e32,
  v_cndmask_b32_e64,
  v_cmp_lt_i32_e64,
  v_lshrrev_b64,
  s_or_saveexec_b64,
  v_cmp_ne_u64_e32,
  v_cndmask_b32_e32,
  s_lshl_b64,
  v_cmp_lt_i32_e32,
  s_add_i32,
  v_addc_co_u32_e32,
  buffer_atomic_add,
  buffer_atomic_add_x2,
  buffer_atomic_and,
  buffer_atomic_and_x2,
  buffer_atomic_cmpswap,
  buffer_atomic_cmpswap_x2,
  buffer_atomic_dec,
  buffer_atomic_dec_x2,
  buffer_atomic_fcmpswap,
  buffer_atomic_fcmpswap_x2,
  buffer_atomic_fmax,
  buffer_atomic_fmax_x2,
  buffer_atomic_fmin,
  buffer_atomic_fmin_x2,
  buffer_atomic_inc,
  buffer_atomic_inc_x2,
  buffer_atomic_or,
  buffer_atomic_or_x2,
  buffer_atomic_rsub,
  buffer_atomic_rsub_x2,
  buffer_atomic_smax,
  buffer_atomic_smax_x2,
  buffer_atomic_smin,
  buffer_atomic_smin_x2,
  buffer_atomic_sub,
  buffer_atomic_sub_x2,
  buffer_atomic_swap,
  buffer_atomic_swap_x2,
  buffer_atomic_umax,
  buffer_atomic_umax_x2,
  buffer_atomic_umin,
  buffer_atomic_umin_x2,
  buffer_atomic_xor,
  buffer_atomic_xor_x2,
  buffer_load_dword,
  buffer_load_dwordx2,
  buffer_load_dwordx3,
  buffer_load_dwordx4,
  buffer_load_format_d16_hi_x,
  buffer_load_format_d16_x,
  buffer_load_format_d16_xy,
  buffer_load_format_d16_xyz,
  buffer_load_format_d16_xyzw,
  buffer_load_format_x,
  buffer_load_format_xy,
  buffer_load_format_xyz,
  buffer_load_format_xyzw,
  buffer_load_sbyte,
  buffer_load_sbyte_d16,
  buffer_load_sbyte_d16_hi,
  buffer_load_short_d16,
  buffer_load_short_d16_hi,
  buffer_load_sshort,
  buffer_load_ubyte,
  buffer_load_ubyte_d16,
  buffer_load_ubyte_d16_hi,
  buffer_load_ushort,
  buffer_store_byte,
  buffer_store_byte_d16_hi,
  buffer_store_dword,
  buffer_store_dwordx2,
  buffer_store_dwordx3,
  buffer_store_dwordx4,
  buffer_store_format_d16_hi_x,
  buffer_store_format_d16_x,
  buffer_store_format_d16_xy,
  buffer_store_format_d16_xyz,
  buffer_store_format_d16_xyzw,
  buffer_store_format_x,
  buffer_store_format_xy,
  buffer_store_format_xyz,
  buffer_store_format_xyzw,
  buffer_store_lds_dword,
  buffer_store_short,
  buffer_store_short_d16_hi,
  buffer_wbinvl1,
  buffer_wbinvl1_sc,
  buffer_wbinvl1_vol,
  ds_add_f32,
  ds_add_rtn_f32,
  ds_add_rtn_u32,
  ds_add_rtn_u64,
  ds_add_src2_f32,
  ds_add_src2_u32,
  ds_add_src2_u64,
  ds_add_u32,
  ds_add_u64,
  ds_and_b32,
  ds_and_b64,
  ds_and_rtn_b32,
  ds_and_rtn_b64,
  ds_and_src2_b32,
  ds_and_src2_b64,
  ds_append,
  ds_bpermute_b32,
  ds_cmpst_b32,
  ds_cmpst_b64,
  ds_cmpst_f32,
  ds_cmpst_f64,
  ds_cmpst_rtn_b32,
  ds_cmpst_rtn_b64,
  ds_cmpst_rtn_f32,
  ds_cmpst_rtn_f64,
  ds_condxchg32_rtn_b128,
  ds_condxchg32_rtn_b64,
  ds_consume,
  ds_dec_rtn_u32,
  ds_dec_rtn_u64,
  ds_dec_src2_u32,
  ds_dec_src2_u64,
  ds_dec_u32,
  ds_dec_u64,
  ds_gws_barrier,
  ds_gws_init,
  ds_gws_sema_br,
  ds_gws_sema_p,
  ds_gws_sema_release_all,
  ds_gws_sema_v,
  ds_inc_rtn_u32,
  ds_inc_rtn_u64,
  ds_inc_src2_u32,
  ds_inc_src2_u64,
  ds_inc_u32,
  ds_inc_u64,
  ds_max_f32,
  ds_max_f64,
  ds_max_i32,
  ds_max_i64,
  ds_max_rtn_f32,
  ds_max_rtn_f64,
  ds_max_rtn_i32,
  ds_max_rtn_i64,
  ds_max_rtn_u32,
  ds_max_rtn_u64,
  ds_max_src2_f32,
  ds_max_src2_f64,
  ds_max_src2_i32,
  ds_max_src2_i64,
  ds_max_src2_u32,
  ds_max_src2_u64,
  ds_max_u32,
  ds_max_u64,
  ds_min_f32,
  ds_min_f64,
  ds_min_i32,
  ds_min_i64,
  ds_min_rtn_f32,
  ds_min_rtn_f64,
  ds_min_rtn_i32,
  ds_min_rtn_i64,
  ds_min_rtn_u32,
  ds_min_rtn_u64,
  ds_min_src2_f32,
  ds_min_src2_f64,
  ds_min_src2_i32,
  ds_min_src2_i64,
  ds_min_src2_u32,
  ds_min_src2_u64,
  ds_min_u32,
  ds_min_u64,
  ds_mskor_b32,
  ds_mskor_b64,
  ds_mskor_rtn_b32,
  ds_mskor_rtn_b64,
  ds_nop,
  ds_or_b32,
  ds_or_b64,
  ds_or_rtn_b32,
  ds_or_rtn_b64,
  ds_or_src2_b32,
  ds_or_src2_b64,
  ds_ordered_count,
  ds_permute_b32,
  ds_read2_b32,
  ds_read2_b64,
  ds_read2st64_b32,
  ds_read2st64_b64,
  ds_read_addtid_b32,
  ds_read_b128,
  ds_read_b32,
  ds_read_b64,
  ds_read_b96,
  ds_read_i16,
  ds_read_i8,
  ds_read_i8_d16,
  ds_read_i8_d16_hi,
  ds_read_u16,
  ds_read_u16_d16,
  ds_read_u16_d16_hi,
  ds_read_u8,
  ds_read_u8_d16,
  ds_read_u8_d16_hi,
  ds_rsub_rtn_u32,
  ds_rsub_rtn_u64,
  ds_rsub_src2_u32,
  ds_rsub_src2_u64,
  ds_rsub_u32,
  ds_rsub_u64,
  ds_sub_rtn_u32,
  ds_sub_rtn_u64,
  ds_sub_src2_u32,
  ds_sub_src2_u64,
  ds_sub_u32,
  ds_sub_u64,
  ds_swizzle_b32,
  ds_wrap_rtn_b32,
  ds_write2_b32,
  ds_write2_b64,
  ds_write2st64_b32,
  ds_write2st64_b64,
  ds_write_addtid_b32,
  ds_write_b128,
  ds_write_b16,
  ds_write_b16_d16_hi,
  ds_write_b32,
  ds_write_b64,
  ds_write_b8,
  ds_write_b8_d16_hi,
  ds_write_b96,
  ds_write_src2_b32,
  ds_write_src2_b64,
  ds_wrxchg2_rtn_b32,
  ds_wrxchg2_rtn_b64,
  ds_wrxchg2st64_rtn_b32,
  ds_wrxchg2st64_rtn_b64,
  ds_wrxchg_rtn_b32,
  ds_wrxchg_rtn_b64,
  ds_xor_b32,
  ds_xor_b64,
  ds_xor_rtn_b32,
  ds_xor_rtn_b64,
  ds_xor_src2_b32,
  ds_xor_src2_b64,
  exp,
  flat_atomic_add,
  flat_atomic_add_x2,
  flat_atomic_and,
  flat_atomic_and_x2,
  flat_atomic_cmpswap,
  flat_atomic_cmpswap_x2,
  flat_atomic_dec,
  flat_atomic_dec_x2,
  flat_atomic_fcmpswap,
  flat_atomic_fcmpswap_x2,
  flat_atomic_fmax,
  flat_atomic_fmax_x2,
  flat_atomic_fmin,
  flat_atomic_fmin_x2,
  flat_atomic_inc,
  flat_atomic_inc_x2,
  flat_atomic_or,
  flat_atomic_or_x2,
  flat_atomic_smax,
  flat_atomic_smax_x2,
  flat_atomic_smin,
  flat_atomic_smin_x2,
  flat_atomic_sub,
  flat_atomic_sub_x2,
  flat_atomic_swap,
  flat_atomic_swap_x2,
  flat_atomic_umax,
  flat_atomic_umax_x2,
  flat_atomic_umin,
  flat_atomic_umin_x2,
  flat_atomic_xor,
  flat_atomic_xor_x2,
  flat_load_dword,
  flat_load_dwordx2,
  flat_load_dwordx3,
  flat_load_dwordx4,
  flat_load_sbyte,
  flat_load_sbyte_d16,
  flat_load_sbyte_d16_hi,
  flat_load_short_d16,
  flat_load_short_d16_hi,
  flat_load_sshort,
  flat_load_ubyte,
  flat_load_ubyte_d16,
  flat_load_ubyte_d16_hi,
  flat_load_ushort,
  flat_store_byte_d16_hi,
  flat_store_dword,
  flat_store_dwordx2,
  flat_store_dwordx3,
  flat_store_dwordx4,
  flat_store_short,
  flat_store_short_d16_hi,
  global_atomic_add,
  global_atomic_add_x2,
  global_atomic_and,
  global_atomic_and_x2,
  global_atomic_cmpswap,
  global_atomic_cmpswap_x2,
  global_atomic_dec,
  global_atomic_dec_x2,
  global_atomic_inc,
  global_atomic_inc_x2,
  global_atomic_or,
  global_atomic_or_x2,
  global_atomic_smax,
  global_atomic_smax_x2,
  global_atomic_smin,
  global_atomic_smin_x2,
  global_atomic_sub,
  global_atomic_sub_x2,
  global_atomic_swap,
  global_atomic_swap_x2,
  global_atomic_umax,
  global_atomic_umax_x2,
  global_atomic_umin,
  global_atomic_umin_x2,
  global_atomic_xor,
  global_atomic_xor_x2,
  global_load_dword,
  global_load_dwordx2,
  global_load_dwordx3,
  global_load_dwordx4,
  global_load_sbyte,
  global_load_sbyte_d16,
  global_load_sbyte_d16_hi,
  global_load_short_d16,
  global_load_short_d16_hi,
  global_load_sshort,
  global_load_ubyte,
  global_load_ubyte_d16,
  global_load_ubyte_d16_hi,
  global_load_ushort,
  global_store_byte,
  global_store_byte_d16_hi,
  global_store_dwordx3,
  global_store_short_d16_hi,
  image_atomic_add,
  image_atomic_and,
  image_atomic_cmpswap,
  image_atomic_dec,
  image_atomic_fcmpswap,
  image_atomic_fmax,
  image_atomic_fmin,
  image_atomic_inc,
  image_atomic_or,
  image_atomic_rsub,
  image_atomic_smax,
  image_atomic_smin,
  image_atomic_sub,
  image_atomic_swap,
  image_atomic_umax,
  image_atomic_umin,
  image_atomic_xor,
  image_gather4,
  image_gather4_b,
  image_gather4_b_cl,
  image_gather4_b_cl_o,
  image_gather4_b_o,
  image_gather4_c,
  image_gather4_c_b,
  image_gather4_c_b_cl,
  image_gather4_c_b_cl_o,
  image_gather4_c_b_o,
  image_gather4_c_cl,
  image_gather4_c_cl_o,
  image_gather4_c_l,
  image_gather4_c_l_o,
  image_gather4_c_lz,
  image_gather4_c_lz_o,
  image_gather4_c_o,
  image_gather4_cl,
  image_gather4_cl_o,
  image_gather4_l,
  image_gather4_l_o,
  image_gather4_lz,
  image_gather4_lz_o,
  image_gather4_o,
  image_gather4h,
  image_gather4h_pck,
  image_gather8h_pck,
  image_get_lod,
  image_get_resinfo,
  image_load,
  image_load_mip,
  image_load_mip_pck,
  image_load_mip_pck_sgn,
  image_load_pck,
  image_load_pck_sgn,
  image_rsrc256,
  image_sample,
  image_sample_b,
  image_sample_b_cl,
  image_sample_b_cl_o,
  image_sample_b_o,
  image_sample_c,
  image_sample_c_b,
  image_sample_c_b_cl,
  image_sample_c_b_cl_o,
  image_sample_c_b_o,
  image_sample_c_cd,
  image_sample_c_cd_cl,
  image_sample_c_cd_cl_o,
  image_sample_c_cd_o,
  image_sample_c_cl,
  image_sample_c_cl_o,
  image_sample_c_d,
  image_sample_c_d_cl,
  image_sample_c_d_cl_o,
  image_sample_c_d_o,
  image_sample_c_l,
  image_sample_c_l_o,
  image_sample_c_lz,
  image_sample_c_lz_o,
  image_sample_c_o,
  image_sample_cd,
  image_sample_cd_cl,
  image_sample_cd_cl_o,
  image_sample_cd_o,
  image_sample_cl,
  image_sample_cl_o,
  image_sample_d,
  image_sample_d_cl,
  image_sample_d_cl_o,
  image_sample_d_o,
  image_sample_l,
  image_sample_l_o,
  image_sample_lz,
  image_sample_lz_o,
  image_sample_o,
  image_sampler,
  image_store,
  image_store_mip,
  image_store_mip_pck,
  image_store_pck,
  s_abs_i32,
  s_absdiff_i32,
  s_addk_i32,
  s_and_b64,
  s_andn1_saveexec_b64,
  s_andn1_wrexec_b64,
  s_andn2_b32,
  s_andn2_b64,
  s_andn2_saveexec_b64,
  s_andn2_wrexec_b64,
  s_ashr_i32,
  s_ashr_i64,
  s_atc_probe,
  s_atc_probe_buffer,
  s_atomic_add,
  s_atomic_add_x2,
  s_atomic_and,
  s_atomic_and_x2,
  s_atomic_cmpswap,
  s_atomic_cmpswap_x2,
  s_atomic_dec,
  s_atomic_dec_x2,
  s_atomic_inc,
  s_atomic_inc_x2,
  s_atomic_or,
  s_atomic_or_x2,
  s_atomic_smax,
  s_atomic_smax_x2,
  s_atomic_smin,
  s_atomic_smin_x2,
  s_atomic_sub,
  s_atomic_sub_x2,
  s_atomic_swap,
  s_atomic_swap_x2,
  s_atomic_umax,
  s_atomic_umax_x2,
  s_atomic_umin,
  s_atomic_umin_x2,
  s_atomic_xor,
  s_atomic_xor_x2,
  s_barrier,
  s_bcnt0_i32_b32,
  s_bcnt0_i32_b64,
  s_bcnt1_i32_b32,
  s_bcnt1_i32_b64,
  s_bfe_i32,
  s_bfe_i64,
  s_bfe_u64,
  s_bfm_b32,
  s_bfm_b64,
  s_bitcmp0_b32,
  s_bitcmp0_b64,
  s_bitcmp1_b32,
  s_bitcmp1_b64,
  s_bitreplicate_b64_b32,
  s_bitset0_b32,
  s_bitset0_b64,
  s_bitset1_b32,
  s_bitset1_b64,
  s_branch,
  s_brev_b32,
  s_brev_b64,
  s_buffer_atomic_add,
  s_buffer_atomic_add_x2,
  s_buffer_atomic_and,
  s_buffer_atomic_and_x2,
  s_buffer_atomic_cmpswap,
  s_buffer_atomic_cmpswap_x2,
  s_buffer_atomic_dec,
  s_buffer_atomic_dec_x2,
  s_buffer_atomic_inc,
  s_buffer_atomic_inc_x2,
  s_buffer_atomic_or,
  s_buffer_atomic_or_x2,
  s_buffer_atomic_smax,
  s_buffer_atomic_smax_x2,
  s_buffer_atomic_smin,
  s_buffer_atomic_smin_x2,
  s_buffer_atomic_sub,
  s_buffer_atomic_sub_x2,
  s_buffer_atomic_swap,
  s_buffer_atomic_swap_x2,
  s_buffer_atomic_umax,
  s_buffer_atomic_umax_x2,
  s_buffer_atomic_umin,
  s_buffer_atomic_umin_x2,
  s_buffer_atomic_xor,
  s_buffer_atomic_xor_x2,
  s_buffer_load_dword,
  s_buffer_load_dwordx16,
  s_buffer_load_dwordx4,
  s_buffer_load_dwordx8,
  s_buffer_store_dword,
  s_buffer_store_dwordx2,
  s_buffer_store_dwordx4,
  s_call_b64,
  s_cbranch_cdbgsys,
  s_cbranch_cdbgsys_and_user,
  s_cbranch_cdbgsys_or_user,
  s_cbranch_cdbguser,
  s_cbranch_execnz,
  s_cbranch_g_fork,
  s_cbranch_i_fork,
  s_cbranch_join,
  s_cbranch_scc0,
  s_cbranch_scc1,
  s_cbranch_vccnz,
  s_cbranch_vccz,
  s_cmov_b32,
  s_cmov_b64,
  s_cmovk_i32,
  s_cmp_eq_i32,
  s_cmp_eq_u32,
  s_cmp_eq_u64,
  s_cmp_ge_i32,
  s_cmp_ge_u32,
  s_cmp_gt_i32,
  s_cmp_gt_u32,
  s_cmp_le_i32,
  s_cmp_le_u32,
  s_cmp_lg_i32,
  s_cmp_lg_u32,
  s_cmp_lg_u64,
  s_cmp_lt_i32,
  s_cmp_lt_u32,
  s_cmpk_eq_i32,
  s_cmpk_eq_u32,
  s_cmpk_ge_i32,
  s_cmpk_ge_u32,
  s_cmpk_gt_i32,
  s_cmpk_gt_u32,
  s_cmpk_le_i32,
  s_cmpk_le_u32,
  s_cmpk_lg_i32,
  s_cmpk_lg_u32,
  s_cmpk_lt_i32,
  s_cmpk_lt_u32,
  s_cselect_b32,
  s_cselect_b64,
  s_dcache_discard,
  s_dcache_discard_x2,
  s_dcache_inv,
  s_dcache_inv_vol,
  s_dcache_wb,
  s_dcache_wb_vol,
  s_decperflevel,
  s_endpgm_ordered_ps_done,
  s_endpgm_saved,
  s_ff0_i32_b32,
  s_ff0_i32_b64,
  s_ff1_i32_b32,
  s_ff1_i32_b64,
  s_flbit_i32,
  s_flbit_i32_b32,
  s_flbit_i32_b64,
  s_flbit_i32_i64,
  s_getpc_b64,
  s_getreg_b32,
  s_getreg_regrd_b32,
  s_icache_inv,
  s_incperflevel,
  s_load_dwordx16,
  s_load_dwordx4,
  s_load_dwordx8,
  s_lshl1_add_u32,
  s_lshl2_add_u32,
  s_lshl3_add_u32,
  s_lshl4_add_u32,
  s_lshl_b32,
  s_lshr_b32,
  s_lshr_b64,
  s_max_i32,
  s_max_u32,
  s_memrealtime,
  s_memtime,
  s_min_i32,
  s_min_u32,
  s_mov_b64,
  s_mov_fed_b32,
  s_mov_regrd_b32,
  s_movk_i32,
  s_movreld_b32,
  s_movreld_b64,
  s_movrels_b32,
  s_movrels_b64,
  s_mul_hi_i32,
  s_mul_hi_u32,
  s_mulk_i32,
  s_nand_b32,
  s_nand_b64,
  s_nand_saveexec_b64,
  s_nop,
  s_nor_b32,
  s_nor_b64,
  s_nor_saveexec_b64,
  s_not_b32,
  s_not_b64,
  s_or_b32,
  s_or_b64,
  s_orn1_saveexec_b64,
  s_orn2_b32,
  s_orn2_b64,
  s_orn2_saveexec_b64,
  s_pack_hh_b32_b16,
  s_pack_lh_b32_b16,
  s_pack_ll_b32_b16,
  s_quadmask_b32,
  s_quadmask_b64,
  s_rfe_b64,
  s_rfe_restore_b64,
  s_scratch_load_dword,
  s_scratch_load_dwordx2,
  s_scratch_load_dwordx4,
  s_scratch_store_dword,
  s_scratch_store_dwordx2,
  s_scratch_store_dwordx4,
  s_sendmsg,
  s_sendmsghalt,
  s_set_gpr_idx_idx,
  s_set_gpr_idx_mode,
  s_set_gpr_idx_off,
  s_set_gpr_idx_on,
  s_sethalt,
  s_setkill,
  s_setpc_b64,
  s_setprio,
  s_setreg_b32,
  s_setreg_imm32_b32,
  s_setvskip,
  s_sext_i32_i16,
  s_sext_i32_i8,
  s_sleep,
  s_store_dword,
  s_store_dwordx2,
  s_store_dwordx4,
  s_sub_i32,
  s_sub_u32,
  s_subb_u32,
  s_swappc_b64,
  s_trap,
  s_ttracedata,
  s_wakeup,
  s_wqm_b32,
  s_wqm_b64,
  s_xnor_b32,
  s_xnor_b64,
  s_xnor_saveexec_b64,
  s_xor_b32,
  s_xor_saveexec_b64,
  scratch_load_dword,
  scratch_load_dwordx2,
  scratch_load_dwordx3,
  scratch_load_dwordx4,
  scratch_load_sbyte,
  scratch_load_sbyte_d16,
  scratch_load_sbyte_d16_hi,
  scratch_load_short_d16,
  scratch_load_short_d16_hi,
  scratch_load_sshort,
  scratch_load_ubyte,
  scratch_load_ubyte_d16,
  scratch_load_ubyte_d16_hi,
  scratch_load_ushort,
  scratch_store_byte,
  scratch_store_byte_d16_hi,
  scratch_store_dword,
  scratch_store_dwordx2,
  scratch_store_dwordx3,
  scratch_store_dwordx4,
  scratch_store_short,
  scratch_store_short_d16_hi,
  tbuffer_load_format_d16_x,
  tbuffer_load_format_d16_xy,
  tbuffer_load_format_d16_xyz,
  tbuffer_load_format_d16_xyzw,
  tbuffer_load_format_x,
  tbuffer_load_format_xy,
  tbuffer_load_format_xyz,
  tbuffer_load_format_xyzw,
  tbuffer_store_format_d16_x,
  tbuffer_store_format_d16_xy,
  tbuffer_store_format_d16_xyz,
  tbuffer_store_format_d16_xyzw,
  tbuffer_store_format_x,
  tbuffer_store_format_xy,
  tbuffer_store_format_xyz,
  tbuffer_store_format_xyzw,
  v_add3_u32,
  v_add_co_u32,
  v_add_f16,
  v_add_f32,
  v_add_f64,
  v_add_i16,
  v_add_i32,
  v_add_lshl_u32,
  v_add_u16,
  v_add_u32,
  v_addc_co_u32,
  v_addc_u32,
  v_alignbit_b32,
  v_alignbyte_b32,
  v_and_b32,
  v_and_or_b32,
  v_ashr_i32,
  v_ashr_i64,
  v_ashrrev_i16,
  v_ashrrev_i32,
  v_ashrrev_i64,
  v_bcnt_u32_b32,
  v_bfe_i32,
  v_bfe_u32,
  v_bfi_b32,
  v_bfm_b32,
  v_bfrev_b32,
  v_ceil_f16,
  v_ceil_f32,
  v_ceil_f64,
  v_clrexcp,
  v_cmp_class_f16,
  v_cmp_class_f32,
  v_cmp_class_f64,
  v_cmp_eq_f16,
  v_cmp_eq_f32,
  v_cmp_eq_f64,
  v_cmp_eq_i16,
  v_cmp_eq_i32,
  v_cmp_eq_i64,
  v_cmp_eq_u16,
  v_cmp_eq_u32,
  v_cmp_eq_u64,
  v_cmp_f_f16,
  v_cmp_f_f32,
  v_cmp_f_f64,
  v_cmp_f_i16,
  v_cmp_f_i32,
  v_cmp_f_i64,
  v_cmp_f_u16,
  v_cmp_f_u32,
  v_cmp_f_u64,
  v_cmp_ge_f16,
  v_cmp_ge_f32,
  v_cmp_ge_f64,
  v_cmp_ge_i16,
  v_cmp_ge_i32,
  v_cmp_ge_i64,
  v_cmp_ge_u16,
  v_cmp_ge_u32,
  v_cmp_ge_u64,
  v_cmp_gt_f16,
  v_cmp_gt_f32,
  v_cmp_gt_f64,
  v_cmp_gt_i16,
  v_cmp_gt_i32,
  v_cmp_gt_i64,
  v_cmp_gt_u16,
  v_cmp_gt_u32,
  v_cmp_gt_u64,
  v_cmp_le_f16,
  v_cmp_le_f32,
  v_cmp_le_f64,
  v_cmp_le_i16,
  v_cmp_le_i32,
  v_cmp_le_i64,
  v_cmp_le_u16,
  v_cmp_le_u32,
  v_cmp_le_u64,
  v_cmp_lg_f16,
  v_cmp_lg_f32,
  v_cmp_lg_f64,
  v_cmp_lt_f16,
  v_cmp_lt_f32,
  v_cmp_lt_f64,
  v_cmp_lt_i16,
  v_cmp_lt_i32,
  v_cmp_lt_i64,
  v_cmp_lt_u16,
  v_cmp_lt_u32,
  v_cmp_lt_u64,
  v_cmp_ne_i16,
  v_cmp_ne_i32,
  v_cmp_ne_i64,
  v_cmp_ne_u16,
  v_cmp_ne_u32,
  v_cmp_ne_u64,
  v_cmp_neq_f16,
  v_cmp_neq_f32,
  v_cmp_neq_f64,
  v_cmp_nge_f16,
  v_cmp_nge_f32,
  v_cmp_nge_f64,
  v_cmp_ngt_f16,
  v_cmp_ngt_f32,
  v_cmp_ngt_f64,
  v_cmp_nle_f16,
  v_cmp_nle_f32,
  v_cmp_nle_f64,
  v_cmp_nlg_f16,
  v_cmp_nlg_f32,
  v_cmp_nlg_f64,
  v_cmp_nlt_f16,
  v_cmp_nlt_f32,
  v_cmp_nlt_f64,
  v_cmp_o_f16,
  v_cmp_o_f32,
  v_cmp_o_f64,
  v_cmp_t_i16,
  v_cmp_t_i32,
  v_cmp_t_i64,
  v_cmp_t_u16,
  v_cmp_t_u32,
  v_cmp_t_u64,
  v_cmp_tru_f16,
  v_cmp_tru_f32,
  v_cmp_tru_f64,
  v_cmp_u_f16,
  v_cmp_u_f32,
  v_cmp_u_f64,
  v_cmps_eq_f32,
  v_cmps_eq_f64,
  v_cmps_f_f32,
  v_cmps_f_f64,
  v_cmps_ge_f32,
  v_cmps_ge_f64,
  v_cmps_gt_f32,
  v_cmps_gt_f64,
  v_cmps_le_f32,
  v_cmps_le_f64,
  v_cmps_lg_f32,
  v_cmps_lg_f64,
  v_cmps_lt_f32,
  v_cmps_lt_f64,
  v_cmps_neq_f32,
  v_cmps_neq_f64,
  v_cmps_nge_f32,
  v_cmps_nge_f64,
  v_cmps_ngt_f32,
  v_cmps_ngt_f64,
  v_cmps_nle_f32,
  v_cmps_nle_f64,
  v_cmps_nlg_f32,
  v_cmps_nlg_f64,
  v_cmps_nlt_f32,
  v_cmps_nlt_f64,
  v_cmps_o_f32,
  v_cmps_o_f64,
  v_cmps_tru_f32,
  v_cmps_tru_f64,
  v_cmps_u_f32,
  v_cmps_u_f64,
  v_cmpsx_eq_f32,
  v_cmpsx_eq_f64,
  v_cmpsx_f_f32,
  v_cmpsx_f_f64,
  v_cmpsx_ge_f32,
  v_cmpsx_ge_f64,
  v_cmpsx_gt_f32,
  v_cmpsx_gt_f64,
  v_cmpsx_le_f32,
  v_cmpsx_le_f64,
  v_cmpsx_lg_f32,
  v_cmpsx_lg_f64,
  v_cmpsx_lt_f32,
  v_cmpsx_lt_f64,
  v_cmpsx_neq_f32,
  v_cmpsx_neq_f64,
  v_cmpsx_nge_f32,
  v_cmpsx_nge_f64,
  v_cmpsx_ngt_f32,
  v_cmpsx_ngt_f64,
  v_cmpsx_nle_f32,
  v_cmpsx_nle_f64,
  v_cmpsx_nlg_f32,
  v_cmpsx_nlg_f64,
  v_cmpsx_nlt_f32,
  v_cmpsx_nlt_f64,
  v_cmpsx_o_f32,
  v_cmpsx_o_f64,
  v_cmpsx_tru_f32,
  v_cmpsx_tru_f64,
  v_cmpsx_u_f32,
  v_cmpsx_u_f64,
  v_cmpx_class_f16,
  v_cmpx_class_f32,
  v_cmpx_class_f64,
  v_cmpx_eq_f16,
  v_cmpx_eq_f32,
  v_cmpx_eq_f64,
  v_cmpx_eq_i16,
  v_cmpx_eq_i32,
  v_cmpx_eq_i64,
  v_cmpx_eq_u16,
  v_cmpx_eq_u32,
  v_cmpx_eq_u64,
  v_cmpx_f_f16,
  v_cmpx_f_f32,
  v_cmpx_f_f64,
  v_cmpx_f_i16,
  v_cmpx_f_i32,
  v_cmpx_f_i64,
  v_cmpx_f_u16,
  v_cmpx_f_u32,
  v_cmpx_f_u64,
  v_cmpx_ge_f16,
  v_cmpx_ge_f32,
  v_cmpx_ge_f64,
  v_cmpx_ge_i16,
  v_cmpx_ge_i32,
  v_cmpx_ge_i64,
  v_cmpx_ge_u16,
  v_cmpx_ge_u32,
  v_cmpx_ge_u64,
  v_cmpx_gt_f16,
  v_cmpx_gt_f32,
  v_cmpx_gt_f64,
  v_cmpx_gt_i16,
  v_cmpx_gt_i32,
  v_cmpx_gt_i64,
  v_cmpx_gt_u16,
  v_cmpx_gt_u32,
  v_cmpx_gt_u64,
  v_cmpx_le_f16,
  v_cmpx_le_f32,
  v_cmpx_le_f64,
  v_cmpx_le_i16,
  v_cmpx_le_i32,
  v_cmpx_le_i64,
  v_cmpx_le_u16,
  v_cmpx_le_u32,
  v_cmpx_le_u64,
  v_cmpx_lg_f16,
  v_cmpx_lg_f32,
  v_cmpx_lg_f64,
  v_cmpx_lt_f16,
  v_cmpx_lt_f32,
  v_cmpx_lt_f64,
  v_cmpx_lt_i16,
  v_cmpx_lt_i32,
  v_cmpx_lt_i64,
  v_cmpx_lt_u16,
  v_cmpx_lt_u32,
  v_cmpx_lt_u64,
  v_cmpx_ne_i16,
  v_cmpx_ne_i32,
  v_cmpx_ne_i64,
  v_cmpx_ne_u16,
  v_cmpx_ne_u32,
  v_cmpx_ne_u64,
  v_cmpx_neq_f16,
  v_cmpx_neq_f32,
  v_cmpx_neq_f64,
  v_cmpx_nge_f16,
  v_cmpx_nge_f32,
  v_cmpx_nge_f64,
  v_cmpx_ngt_f16,
  v_cmpx_ngt_f32,
  v_cmpx_ngt_f64,
  v_cmpx_nle_f16,
  v_cmpx_nle_f32,
  v_cmpx_nle_f64,
  v_cmpx_nlg_f16,
  v_cmpx_nlg_f32,
  v_cmpx_nlg_f64,
  v_cmpx_nlt_f16,
  v_cmpx_nlt_f32,
  v_cmpx_nlt_f64,
  v_cmpx_o_f16,
  v_cmpx_o_f32,
  v_cmpx_o_f64,
  v_cmpx_t_i16,
  v_cmpx_t_i32,
  v_cmpx_t_i64,
  v_cmpx_t_u16,
  v_cmpx_t_u32,
  v_cmpx_t_u64,
  v_cmpx_tru_f16,
  v_cmpx_tru_f32,
  v_cmpx_tru_f64,
  v_cmpx_u_f16,
  v_cmpx_u_f32,
  v_cmpx_u_f64,
  v_cndmask_b32,
  v_cos_f16,
  v_cos_f32,
  v_cubeid_f32,
  v_cubema_f32,
  v_cubesc_f32,
  v_cubetc_f32,
  v_cvt_f16_f32,
  v_cvt_f16_i16,
  v_cvt_f16_u16,
  v_cvt_f32_f16,
  v_cvt_f32_f64,
  v_cvt_f32_i32,
  v_cvt_f32_u32,
  v_cvt_f32_ubyte0,
  v_cvt_f32_ubyte1,
  v_cvt_f32_ubyte2,
  v_cvt_f32_ubyte3,
  v_cvt_f64_f32,
  v_cvt_f64_i32,
  v_cvt_f64_u32,
  v_cvt_flr_i32_f32,
  v_cvt_i16_f16,
  v_cvt_i32_f32,
  v_cvt_i32_f64,
  v_cvt_norm_i16_f16,
  v_cvt_norm_u16_f16,
  v_cvt_off_f32_i4,
  v_cvt_pk_i16_i32,
  v_cvt_pk_u16_u32,
  v_cvt_pk_u8_f32,
  v_cvt_pkaccum_u8_f32,
  v_cvt_pknorm_i16_f16,
  v_cvt_pknorm_i16_f32,
  v_cvt_pknorm_u16_f16,
  v_cvt_pknorm_u16_f32,
  v_cvt_pkrtz_f16_f32,
  v_cvt_rpi_i32_f32,
  v_cvt_u16_f16,
  v_cvt_u32_f32,
  v_cvt_u32_f64,
  v_div_fixup_f16,
  v_div_fixup_f32,
  v_div_fixup_f64,
  v_div_fixup_legacy_f16,
  v_div_fmas_f32,
  v_div_fmas_f64,
  v_div_scale_f32,
  v_div_scale_f64,
  v_dot2_f32_f16,
  v_dot2_i32_i16,
  v_dot2_i32_i16_i8,
  v_dot2_u32_u16,
  v_dot2_u32_u16_u8,
  v_dot2c_f32_f16,
  v_dot2c_i32_i16,
  v_dot4_i32_i8,
  v_dot4_u32_u8,
  v_dot4c_i32_i8,
  v_dot8_i32_i4,
  v_dot8_u32_u4,
  v_dot8c_i32_i4,
  v_exp_f16,
  v_exp_f32,
  v_exp_legacy_f32,
  v_ffbh_i32,
  v_ffbh_u32,
  v_ffbl_b32,
  v_floor_f16,
  v_floor_f32,
  v_floor_f64,
  v_fma_f16,
  v_fma_f32,
  v_fma_f64,
  v_fma_legacy_f16,
  v_fmac_f32,
  v_fract_f16,
  v_fract_f32,
  v_fract_f64,
  v_frexp_exp_i16_f16,
  v_frexp_exp_i32_f32,
  v_frexp_exp_i32_f64,
  v_frexp_mant_f16,
  v_frexp_mant_f32,
  v_frexp_mant_f64,
  v_interp_mov_f32,
  v_interp_p1_f32,
  v_interp_p1ll_f16,
  v_interp_p1lv_f16,
  v_interp_p2_f16,
  v_interp_p2_f32,
  v_interp_p2_legacy_f16,
  v_ldexp_f16,
  v_ldexp_f32,
  v_ldexp_f64,
  v_lerp_u8,
  v_log_clamp_f32,
  v_log_f16,
  v_log_f32,
  v_log_legacy_f32,
  v_lshl_add_u32,
  v_lshl_b32,
  v_lshl_b64,
  v_lshl_or_b32,
  v_lshlrev_b16,
  v_lshlrev_b32,
  v_lshlrev_b64,
  v_lshr_b32,
  v_lshr_b64,
  v_lshrrev_b16,
  v_lshrrev_b32,
  v_mac_f16,
  v_mac_f32,
  v_mac_legacy_f32,
  v_mad_f16,
  v_mad_f32,
  v_mad_i16,
  v_mad_i32_i16,
  v_mad_i32_i24,
  v_mad_i64_i32,
  v_mad_legacy_f16,
  v_mad_legacy_f32,
  v_mad_legacy_i16,
  v_mad_legacy_u16,
  v_mad_mix_f32,
  v_mad_mixhi_f16,
  v_mad_mixlo_f16,
  v_mad_u16,
  v_mad_u32_u16,
  v_mad_u32_u24,
  v_mad_u64_u32,
  v_madak_f16,
  v_madak_f32,
  v_madmk_f16,
  v_madmk_f32,
  v_max3_f16,
  v_max3_f32,
  v_max3_i16,
  v_max3_i32,
  v_max3_u16,
  v_max3_u32,
  v_max_f16,
  v_max_f32,
  v_max_f64,
  v_max_i16,
  v_max_i32,
  v_max_legacy_f32,
  v_max_u16,
  v_max_u32,
  v_mbcnt_hi_u32_b32,
  v_mbcnt_lo_u32_b32,
  v_med3_f16,
  v_med3_f32,
  v_med3_i16,
  v_med3_i32,
  v_med3_u16,
  v_med3_u32,
  v_min3_f16,
  v_min3_f32,
  v_min3_i16,
  v_min3_i32,
  v_min3_u16,
  v_min3_u32,
  v_min_f16,
  v_min_f32,
  v_min_f64,
  v_min_i16,
  v_min_i32,
  v_min_legacy_f32,
  v_min_u16,
  v_min_u32,
  v_mov_fed_b32,
  v_mov_prsv_b32,
  v_movreld_b32,
  v_movrels_b32,
  v_movrelsd_b32,
  v_mqsad_pk_u16_u8,
  v_mqsad_u32_u8,
  v_mqsad_u8,
  v_msad_u8,
  v_mul_f16,
  v_mul_f32,
  v_mul_f64,
  v_mul_hi_i32,
  v_mul_hi_i32_i24,
  v_mul_hi_u32,
  v_mul_hi_u32_u24,
  v_mul_i32_i24,
  v_mul_legacy_f32,
  v_mul_lo_i32,
  v_mul_lo_u16,
  v_mul_lo_u32,
  v_mul_u32_u24,
  v_mullit_f32,
  v_nop,
  v_not_b32,
  v_or3_b32,
  v_or_b32,
  v_pack_b32_f16,
  v_perm_b32,
  v_pk_add_f16,
  v_pk_add_i16,
  v_pk_add_u16,
  v_pk_ashrrev_i16,
  v_pk_fma_f16,
  v_pk_fmac_f16,
  v_pk_lshlrev_b16,
  v_pk_lshrrev_b16,
  v_pk_mad_i16,
  v_pk_mad_u16,
  v_pk_max_f16,
  v_pk_max_i16,
  v_pk_max_u16,
  v_pk_min_f16,
  v_pk_min_i16,
  v_pk_min_u16,
  v_pk_mul_f16,
  v_pk_mul_lo_u16,
  v_pk_sub_i16,
  v_pk_sub_u16,
  v_qsad_pk_u16_u8,
  v_qsad_u8,
  v_rcp_clamp_f32,
  v_rcp_clamp_f64,
  v_rcp_f16,
  v_rcp_f32,
  v_rcp_f64,
  v_rcp_iflag_f32,
  v_rcp_legacy_f32,
  v_readfirstlane_b32,
  v_readlane_b32,
  v_readlane_regrd_b32,
  v_rndne_f16,
  v_rndne_f32,
  v_rndne_f64,
  v_rsq_clamp_f32,
  v_rsq_clamp_f64,
  v_rsq_f16,
  v_rsq_f32,
  v_rsq_f64,
  v_rsq_legacy_f32,
  v_sad_hi_u8,
  v_sad_u16,
  v_sad_u32,
  v_sad_u8,
  v_sat_pk_u8_i16,
  v_screen_partition_4se_b32,
  v_sin_f16,
  v_sin_f32,
  v_sqrt_f16,
  v_sqrt_f32,
  v_sqrt_f64,
  v_sub_co_u32,
  v_sub_f16,
  v_sub_f32,
  v_sub_i16,
  v_sub_i32,
  v_sub_u16,
  v_sub_u32,
  v_subb_co_u32,
  v_subb_u32,
  v_subbrev_co_u32,
  v_subbrev_u32,
  v_subrev_co_u32,
  v_subrev_f16,
  v_subrev_f32,
  v_subrev_i32,
  v_subrev_u16,
  v_subrev_u32,
  v_swap_b32,
  v_trig_preop_f64,
  v_trunc_f16,
  v_trunc_f32,
  v_trunc_f64,
  v_writelane_b32,
  v_writelane_regwr_b32,
  v_xad_u32,
  v_xnor_b32,
  v_xor_b32,
  ds_add_read_f32,
  ds_add_read_u32,
  ds_add_read_u64,
  ds_and_read_b32,
  ds_and_read_b64,
  ds_dec_read_u32,
  ds_dec_read_u64,
  ds_inc_read_u32,
  ds_inc_read_u64,
  ds_max_read_f32,
  ds_max_read_f64,
  ds_max_read_i32,
  ds_max_read_i64,
  ds_max_read_u32,
  ds_max_read_u64,
  ds_min_read_f32,
  ds_min_read_f64,
  ds_min_read_i32,
  ds_min_read_i64,
  ds_min_read_u32,
  ds_min_read_u64,
  ds_or_read_b32,
  ds_or_read_b64,
  ds_rsub_read_u32,
  ds_rsub_read_u64,
  ds_sub_read_u32,
  ds_sub_read_u64,
  ds_write_read_b32,
  ds_write_read_b64,
  ds_xor_read_b32,
  ds_xor_read_b64,
  v_bfrev_b32_dpp,
  v_bfrev_b32_sdwa,
  v_ceil_f16_dpp,
  v_ceil_f16_sdwa,
  v_ceil_f32_dpp,
  v_ceil_f32_sdwa,
  v_cos_f16_dpp,
  v_cos_f16_sdwa,
  v_cos_f32_dpp,
  v_cos_f32_sdwa,
  v_cvt_f16_f32_dpp,
  v_cvt_f16_f32_sdwa,
  v_cvt_f16_i16_dpp,
  v_cvt_f16_i16_sdwa,
  v_cvt_f16_u16_dpp,
  v_cvt_f16_u16_sdwa,
  v_cvt_f32_f16_dpp,
  v_cvt_f32_f16_sdwa,
  v_cvt_f32_i32_dpp,
  v_cvt_f32_i32_sdwa,
  v_cvt_f32_u32_dpp,
  v_cvt_f32_u32_sdwa,
  v_cvt_f32_ubyte0_dpp,
  v_cvt_f32_ubyte0_sdwa,
  v_cvt_f32_ubyte1_dpp,
  v_cvt_f32_ubyte1_sdwa,
  v_cvt_f32_ubyte2_dpp,
  v_cvt_f32_ubyte2_sdwa,
  v_cvt_f32_ubyte3_dpp,
  v_cvt_f32_ubyte3_sdwa,
  v_cvt_flr_i32_f32_dpp,
  v_cvt_flr_i32_f32_sdwa,
  v_cvt_i16_f16_dpp,
  v_cvt_i16_f16_sdwa,
  v_cvt_i32_f32_dpp,
  v_cvt_i32_f32_sdwa,
  v_cvt_norm_i16_f16_dpp,
  v_cvt_norm_i16_f16_sdwa,
  v_cvt_norm_u16_f16_dpp,
  v_cvt_norm_u16_f16_sdwa,
  v_cvt_off_f32_i4_dpp,
  v_cvt_off_f32_i4_sdwa,
  v_cvt_rpi_i32_f32_dpp,
  v_cvt_rpi_i32_f32_sdwa,
  v_cvt_u16_f16_dpp,
  v_cvt_u16_f16_sdwa,
  v_cvt_u32_f32_dpp,
  v_cvt_u32_f32_sdwa,
  v_exp_f16_dpp,
  v_exp_f16_sdwa,
  v_exp_f32_dpp,
  v_exp_f32_sdwa,
  v_exp_legacy_f32_dpp,
  v_exp_legacy_f32_sdwa,
  v_ffbh_i32_dpp,
  v_ffbh_i32_sdwa,
  v_ffbh_u32_dpp,
  v_ffbh_u32_sdwa,
  v_ffbl_b32_dpp,
  v_ffbl_b32_sdwa,
  v_floor_f16_dpp,
  v_floor_f16_sdwa,
  v_floor_f32_dpp,
  v_floor_f32_sdwa,
  v_fract_f16_dpp,
  v_fract_f16_sdwa,
  v_fract_f32_dpp,
  v_fract_f32_sdwa,
  v_frexp_exp_i16_f16_dpp,
  v_frexp_exp_i16_f16_sdwa,
  v_frexp_exp_i32_f32_dpp,
  v_frexp_exp_i32_f32_sdwa,
  v_frexp_mant_f16_dpp,
  v_frexp_mant_f16_sdwa,
  v_frexp_mant_f32_dpp,
  v_frexp_mant_f32_sdwa,
  v_log_f16_dpp,
  v_log_f16_sdwa,
  v_log_f32_dpp,
  v_log_f32_sdwa,
  v_log_legacy_f32_dpp,
  v_log_legacy_f32_sdwa,
  v_mov_b32_dpp,
  v_mov_b32_sdwa,
  v_mov_fed_b32_dpp,
  v_mov_fed_b32_sdwa,
  v_not_b32_dpp,
  v_not_b32_sdwa,
  v_rcp_f16_dpp,
  v_rcp_f16_sdwa,
  v_rcp_f32_dpp,
  v_rcp_f32_sdwa,
  v_rcp_iflag_f32_dpp,
  v_rcp_iflag_f32_sdwa,
  v_rndne_f16_dpp,
  v_rndne_f16_sdwa,
  v_rndne_f32_dpp,
  v_rndne_f32_sdwa,
  v_rsq_f16_dpp,
  v_rsq_f16_sdwa,
  v_rsq_f32_dpp,
  v_rsq_f32_sdwa,
  v_sat_pk_u8_i16_dpp,
  v_sat_pk_u8_i16_sdwa,
  v_screen_partition_4se_b32_dpp,
  v_screen_partition_4se_b32_sdwa,
  v_sin_f16_dpp,
  v_sin_f16_sdwa,
  v_sin_f32_dpp,
  v_sin_f32_sdwa,
  v_sqrt_f16_dpp,
  v_sqrt_f16_sdwa,
  v_sqrt_f32_dpp,
  v_sqrt_f32_sdwa,
  v_trunc_f16_dpp,
  v_trunc_f16_sdwa,
  v_trunc_f32_dpp,
  v_trunc_f32_sdwa,
  v_add_co_u32_dpp,
  v_add_co_u32_sdwa,
  v_add_f16_dpp,
  v_add_f16_sdwa,
  v_add_f32_dpp,
  v_add_f32_sdwa,
  v_add_u16_dpp,
  v_add_u16_sdwa,
  v_add_u32_dpp,
  v_add_u32_sdwa,
  v_addc_co_u32_dpp,
  v_addc_co_u32_sdwa,
  v_and_b32_dpp,
  v_and_b32_sdwa,
  v_ashrrev_i16_dpp,
  v_ashrrev_i16_sdwa,
  v_ashrrev_i32_dpp,
  v_ashrrev_i32_sdwa,
  v_cndmask_b32_dpp,
  v_cndmask_b32_sdwa,
  v_ldexp_f16_dpp,
  v_ldexp_f16_sdwa,
  v_lshlrev_b16_dpp,
  v_lshlrev_b16_sdwa,
  v_lshlrev_b32_dpp,
  v_lshlrev_b32_sdwa,
  v_lshrrev_b16_dpp,
  v_lshrrev_b16_sdwa,
  v_lshrrev_b32_dpp,
  v_lshrrev_b32_sdwa,
  v_mac_f16_dpp,
  v_mac_f32_dpp,
  v_max_f16_dpp,
  v_max_f16_sdwa,
  v_max_f32_dpp,
  v_max_f32_sdwa,
  v_max_i16_dpp,
  v_max_i16_sdwa,
  v_max_i32_dpp,
  v_max_i32_sdwa,
  v_max_u16_dpp,
  v_max_u16_sdwa,
  v_max_u32_dpp,
  v_max_u32_sdwa,
  v_min_f16_dpp,
  v_min_f16_sdwa,
  v_min_f32_dpp,
  v_min_f32_sdwa,
  v_min_i16_dpp,
  v_min_i16_sdwa,
  v_min_i32_dpp,
  v_min_i32_sdwa,
  v_min_u16_dpp,
  v_min_u16_sdwa,
  v_min_u32_dpp,
  v_min_u32_sdwa,
  v_mul_f16_dpp,
  v_mul_f16_sdwa,
  v_mul_f32_dpp,
  v_mul_f32_sdwa,
  v_mul_hi_i32_i24_dpp,
  v_mul_hi_i32_i24_sdwa,
  v_mul_hi_u32_u24_dpp,
  v_mul_hi_u32_u24_sdwa,
  v_mul_i32_i24_dpp,
  v_mul_i32_i24_sdwa,
  v_mul_legacy_f32_dpp,
  v_mul_legacy_f32_sdwa,
  v_mul_lo_u16_dpp,
  v_mul_lo_u16_sdwa,
  v_mul_u32_u24_dpp,
  v_mul_u32_u24_sdwa,
  v_or_b32_dpp,
  v_or_b32_sdwa,
  v_sub_co_u32_dpp,
  v_sub_co_u32_sdwa,
  v_sub_f16_dpp,
  v_sub_f16_sdwa,
  v_sub_f32_dpp,
  v_sub_f32_sdwa,
  v_sub_u16_dpp,
  v_sub_u16_sdwa,
  v_sub_u32_dpp,
  v_sub_u32_sdwa,
  v_subb_co_u32_dpp,
  v_subb_co_u32_sdwa,
  v_subbrev_co_u32_dpp,
  v_subbrev_co_u32_sdwa,
  v_subrev_co_u32_dpp,
  v_subrev_co_u32_sdwa,
  v_subrev_f16_dpp,
  v_subrev_f16_sdwa,
  v_subrev_f32_dpp,
  v_subrev_f32_sdwa,
  v_subrev_u16_dpp,
  v_subrev_u16_sdwa,
  v_subrev_u32_dpp,
  v_subrev_u32_sdwa,
  v_xor_b32_dpp,
  v_xor_b32_sdwa,
  v_add_co_u32_e64,
  v_add_f16_e64,
  v_add_f32_e64,
  v_add_u16_e64,
  v_add_u32_e64,
  v_addc_co_u32_e64,
  v_and_b32_e64,
  v_ashrrev_i16_e64,
  v_ashrrev_i32_e64,
  v_bfrev_b32_e64,
  v_ceil_f16_e64,
  v_ceil_f32_e64,
  v_ceil_f64_e64,
  v_cmp_class_f16_e64,
  v_cmp_class_f32_e64,
  v_cmp_class_f64_e64,
  v_cmp_eq_f16_e64,
  v_cmp_eq_f32_e64,
  v_cmp_eq_f64_e64,
  v_cmp_eq_i16_e64,
  v_cmp_eq_i32_e64,
  v_cmp_eq_i64_e64,
  v_cmp_eq_u16_e64,
  v_cmp_eq_u32_e64,
  v_cmp_eq_u64_e64,
  v_cmp_f_f16_e64,
  v_cmp_f_f32_e64,
  v_cmp_f_f64_e64,
  v_cmp_f_i16_e64,
  v_cmp_f_i32_e64,
  v_cmp_f_i64_e64,
  v_cmp_f_u16_e64,
  v_cmp_f_u32_e64,
  v_cmp_f_u64_e64,
  v_cmp_ge_f16_e64,
  v_cmp_ge_f32_e64,
  v_cmp_ge_f64_e64,
  v_cmp_ge_i16_e64,
  v_cmp_ge_i32_e64,
  v_cmp_ge_i64_e64,
  v_cmp_ge_u16_e64,
  v_cmp_ge_u32_e64,
  v_cmp_ge_u64_e64,
  v_cmp_gt_f16_e64,
  v_cmp_gt_f32_e64,
  v_cmp_gt_f64_e64,
  v_cmp_gt_i16_e64,
  v_cmp_gt_i32_e64,
  v_cmp_gt_i64_e64,
  v_cmp_gt_u16_e64,
  v_cmp_gt_u32_e64,
  v_cmp_gt_u64_e64,
  v_cmp_le_f16_e64,
  v_cmp_le_f32_e64,
  v_cmp_le_f64_e64,
  v_cmp_le_i16_e64,
  v_cmp_le_i32_e64,
  v_cmp_le_i64_e64,
  v_cmp_le_u16_e64,
  v_cmp_le_u32_e64,
  v_cmp_le_u64_e64,
  v_cmp_lg_f16_e64,
  v_cmp_lg_f32_e64,
  v_cmp_lg_f64_e64,
  v_cmp_lt_f16_e64,
  v_cmp_lt_f32_e64,
  v_cmp_lt_f64_e64,
  v_cmp_lt_i16_e64,
  v_cmp_lt_i64_e64,
  v_cmp_lt_u16_e64,
  v_cmp_lt_u32_e64,
  v_cmp_lt_u64_e64,
  v_cmp_ne_i16_e64,
  v_cmp_ne_i32_e64,
  v_cmp_ne_i64_e64,
  v_cmp_ne_u16_e64,
  v_cmp_ne_u32_e64,
  v_cmp_ne_u64_e64,
  v_cmp_neq_f16_e64,
  v_cmp_neq_f32_e64,
  v_cmp_neq_f64_e64,
  v_cmp_nge_f16_e64,
  v_cmp_nge_f32_e64,
  v_cmp_nge_f64_e64,
  v_cmp_ngt_f16_e64,
  v_cmp_ngt_f32_e64,
  v_cmp_ngt_f64_e64,
  v_cmp_nle_f16_e64,
  v_cmp_nle_f32_e64,
  v_cmp_nle_f64_e64,
  v_cmp_nlg_f16_e64,
  v_cmp_nlg_f32_e64,
  v_cmp_nlg_f64_e64,
  v_cmp_nlt_f16_e64,
  v_cmp_nlt_f32_e64,
  v_cmp_nlt_f64_e64,
  v_cmp_o_f16_e64,
  v_cmp_o_f32_e64,
  v_cmp_o_f64_e64,
  v_cmp_t_i16_e64,
  v_cmp_t_i32_e64,
  v_cmp_t_i64_e64,
  v_cmp_t_u16_e64,
  v_cmp_t_u32_e64,
  v_cmp_t_u64_e64,
  v_cmp_tru_f16_e64,
  v_cmp_tru_f32_e64,
  v_cmp_tru_f64_e64,
  v_cmp_u_f16_e64,
  v_cmp_u_f32_e64,
  v_cmp_u_f64_e64,
  v_cmpx_class_f16_e64,
  v_cmpx_class_f32_e64,
  v_cmpx_class_f64_e64,
  v_cmpx_eq_f16_e64,
  v_cmpx_eq_f32_e64,
  v_cmpx_eq_f64_e64,
  v_cmpx_eq_i16_e64,
  v_cmpx_eq_i32_e64,
  v_cmpx_eq_i64_e64,
  v_cmpx_eq_u16_e64,
  v_cmpx_eq_u32_e64,
  v_cmpx_eq_u64_e64,
  v_cmpx_f_f16_e64,
  v_cmpx_f_f32_e64,
  v_cmpx_f_f64_e64,
  v_cmpx_f_i16_e64,
  v_cmpx_f_i32_e64,
  v_cmpx_f_i64_e64,
  v_cmpx_f_u16_e64,
  v_cmpx_f_u32_e64,
  v_cmpx_f_u64_e64,
  v_cmpx_ge_f16_e64,
  v_cmpx_ge_f32_e64,
  v_cmpx_ge_f64_e64,
  v_cmpx_ge_i16_e64,
  v_cmpx_ge_i32_e64,
  v_cmpx_ge_i64_e64,
  v_cmpx_ge_u16_e64,
  v_cmpx_ge_u32_e64,
  v_cmpx_ge_u64_e64,
  v_cmpx_gt_f16_e64,
  v_cmpx_gt_f32_e64,
  v_cmpx_gt_f64_e64,
  v_cmpx_gt_i16_e64,
  v_cmpx_gt_i32_e64,
  v_cmpx_gt_i64_e64,
  v_cmpx_gt_u16_e64,
  v_cmpx_gt_u32_e64,
  v_cmpx_gt_u64_e64,
  v_cmpx_le_f16_e64,
  v_cmpx_le_f32_e64,
  v_cmpx_le_f64_e64,
  v_cmpx_le_i16_e64,
  v_cmpx_le_i32_e64,
  v_cmpx_le_i64_e64,
  v_cmpx_le_u16_e64,
  v_cmpx_le_u32_e64,
  v_cmpx_le_u64_e64,
  v_cmpx_lg_f16_e64,
  v_cmpx_lg_f32_e64,
  v_cmpx_lg_f64_e64,
  v_cmpx_lt_f16_e64,
  v_cmpx_lt_f32_e64,
  v_cmpx_lt_f64_e64,
  v_cmpx_lt_i16_e64,
  v_cmpx_lt_i32_e64,
  v_cmpx_lt_i64_e64,
  v_cmpx_lt_u16_e64,
  v_cmpx_lt_u32_e64,
  v_cmpx_lt_u64_e64,
  v_cmpx_ne_i16_e64,
  v_cmpx_ne_i32_e64,
  v_cmpx_ne_i64_e64,
  v_cmpx_ne_u16_e64,
  v_cmpx_ne_u32_e64,
  v_cmpx_ne_u64_e64,
  v_cmpx_neq_f16_e64,
  v_cmpx_neq_f32_e64,
  v_cmpx_neq_f64_e64,
  v_cmpx_nge_f16_e64,
  v_cmpx_nge_f32_e64,
  v_cmpx_nge_f64_e64,
  v_cmpx_ngt_f16_e64,
  v_cmpx_ngt_f32_e64,
  v_cmpx_ngt_f64_e64,
  v_cmpx_nle_f16_e64,
  v_cmpx_nle_f32_e64,
  v_cmpx_nle_f64_e64,
  v_cmpx_nlg_f16_e64,
  v_cmpx_nlg_f32_e64,
  v_cmpx_nlg_f64_e64,
  v_cmpx_nlt_f16_e64,
  v_cmpx_nlt_f32_e64,
  v_cmpx_nlt_f64_e64,
  v_cmpx_o_f16_e64,
  v_cmpx_o_f32_e64,
  v_cmpx_o_f64_e64,
  v_cmpx_t_i16_e64,
  v_cmpx_t_i32_e64,
  v_cmpx_t_i64_e64,
  v_cmpx_t_u16_e64,
  v_cmpx_t_u32_e64,
  v_cmpx_t_u64_e64,
  v_cmpx_tru_f16_e64,
  v_cmpx_tru_f32_e64,
  v_cmpx_tru_f64_e64,
  v_cmpx_u_f16_e64,
  v_cmpx_u_f32_e64,
  v_cmpx_u_f64_e64,
  v_cos_f16_e64,
  v_cos_f32_e64,
  v_cvt_f16_f32_e64,
  v_cvt_f16_i16_e64,
  v_cvt_f16_u16_e64,
  v_cvt_f32_f16_e64,
  v_cvt_f32_f64_e64,
  v_cvt_f32_i32_e64,
  v_cvt_f32_u32_e64,
  v_cvt_f32_ubyte0_e64,
  v_cvt_f32_ubyte1_e64,
  v_cvt_f32_ubyte2_e64,
  v_cvt_f32_ubyte3_e64,
  v_cvt_f64_f32_e64,
  v_cvt_f64_i32_e64,
  v_cvt_f64_u32_e64,
  v_cvt_flr_i32_f32_e64,
  v_cvt_i16_f16_e64,
  v_cvt_i32_f32_e64,
  v_cvt_i32_f64_e64,
  v_cvt_norm_i16_f16_e64,
  v_cvt_norm_u16_f16_e64,
  v_cvt_off_f32_i4_e64,
  v_cvt_rpi_i32_f32_e64,
  v_cvt_u16_f16_e64,
  v_cvt_u32_f32_e64,
  v_cvt_u32_f64_e64,
  v_exp_f16_e64,
  v_exp_f32_e64,
  v_exp_legacy_f32_e64,
  v_ffbh_i32_e64,
  v_ffbh_u32_e64,
  v_ffbl_b32_e64,
  v_floor_f16_e64,
  v_floor_f32_e64,
  v_floor_f64_e64,
  v_fract_f16_e64,
  v_fract_f32_e64,
  v_fract_f64_e64,
  v_frexp_exp_i16_f16_e64,
  v_frexp_exp_i32_f32_e64,
  v_frexp_exp_i32_f64_e64,
  v_frexp_mant_f16_e64,
  v_frexp_mant_f32_e64,
  v_frexp_mant_f64_e64,
  v_interp_mov_f32_e64,
  v_interp_p1_f32_e64,
  v_interp_p2_f32_e64,
  v_ldexp_f16_e64,
  v_log_f16_e64,
  v_log_f32_e64,
  v_log_legacy_f32_e64,
  v_lshlrev_b16_e64,
  v_lshlrev_b32_e64,
  v_lshrrev_b16_e64,
  v_lshrrev_b32_e64,
  v_mac_f16_e64,
  v_mac_f32_e64,
  v_max_f16_e64,
  v_max_f32_e64,
  v_max_i16_e64,
  v_max_i32_e64,
  v_max_u16_e64,
  v_max_u32_e64,
  v_min_f16_e64,
  v_min_f32_e64,
  v_min_i16_e64,
  v_min_i32_e64,
  v_min_u16_e64,
  v_min_u32_e64,
  v_mov_b32_e64,
  v_mov_fed_b32_e64,
  v_mul_f16_e64,
  v_mul_f32_e64,
  v_mul_hi_i32_i24_e64,
  v_mul_hi_u32_u24_e64,
  v_mul_i32_i24_e64,
  v_mul_legacy_f32_e64,
  v_mul_lo_u16_e64,
  v_mul_u32_u24_e64,
  v_not_b32_e64,
  v_or_b32_e64,
  v_rcp_f16_e64,
  v_rcp_f32_e64,
  v_rcp_f64_e64,
  v_rcp_iflag_f32_e64,
  v_rndne_f16_e64,
  v_rndne_f32_e64,
  v_rndne_f64_e64,
  v_rsq_f16_e64,
  v_rsq_f32_e64,
  v_rsq_f64_e64,
  v_sat_pk_u8_i16_e64,
  v_screen_partition_4se_b32_e64,
  v_sin_f16_e64,
  v_sin_f32_e64,
  v_sqrt_f16_e64,
  v_sqrt_f32_e64,
  v_sqrt_f64_e64,
  v_sub_co_u32_e64,
  v_sub_f16_e64,
  v_sub_f32_e64,
  v_sub_u16_e64,
  v_sub_u32_e64,
  v_subb_co_u32_e64,
  v_subbrev_co_u32_e64,
  v_subrev_co_u32_e64,
  v_subrev_f16_e64,
  v_subrev_f32_e64,
  v_subrev_u16_e64,
  v_subrev_u32_e64,
  v_trunc_f16_e64,
  v_trunc_f32_e64,
  v_trunc_f64_e64,
  v_xor_b32_e64,
  v_cmp_class_f16_sdwa,
  v_cmp_class_f32_sdwa,
  v_cmp_eq_f16_sdwa,
  v_cmp_eq_f32_sdwa,
  v_cmp_eq_i16_sdwa,
  v_cmp_eq_i32_sdwa,
  v_cmp_eq_u16_sdwa,
  v_cmp_eq_u32_sdwa,
  v_cmp_f_f16_sdwa,
  v_cmp_f_f32_sdwa,
  v_cmp_f_i16_sdwa,
  v_cmp_f_i32_sdwa,
  v_cmp_f_u16_sdwa,
  v_cmp_f_u32_sdwa,
  v_cmp_ge_f16_sdwa,
  v_cmp_ge_f32_sdwa,
  v_cmp_ge_i16_sdwa,
  v_cmp_ge_i32_sdwa,
  v_cmp_ge_u16_sdwa,
  v_cmp_ge_u32_sdwa,
  v_cmp_gt_f16_sdwa,
  v_cmp_gt_f32_sdwa,
  v_cmp_gt_i16_sdwa,
  v_cmp_gt_i32_sdwa,
  v_cmp_gt_u16_sdwa,
  v_cmp_gt_u32_sdwa,
  v_cmp_le_f16_sdwa,
  v_cmp_le_f32_sdwa,
  v_cmp_le_i16_sdwa,
  v_cmp_le_i32_sdwa,
  v_cmp_le_u16_sdwa,
  v_cmp_le_u32_sdwa,
  v_cmp_lg_f16_sdwa,
  v_cmp_lg_f32_sdwa,
  v_cmp_lt_f16_sdwa,
  v_cmp_lt_f32_sdwa,
  v_cmp_lt_i16_sdwa,
  v_cmp_lt_i32_sdwa,
  v_cmp_lt_u16_sdwa,
  v_cmp_lt_u32_sdwa,
  v_cmp_ne_i16_sdwa,
  v_cmp_ne_i32_sdwa,
  v_cmp_ne_u16_sdwa,
  v_cmp_ne_u32_sdwa,
  v_cmp_neq_f16_sdwa,
  v_cmp_neq_f32_sdwa,
  v_cmp_nge_f16_sdwa,
  v_cmp_nge_f32_sdwa,
  v_cmp_ngt_f16_sdwa,
  v_cmp_ngt_f32_sdwa,
  v_cmp_nle_f16_sdwa,
  v_cmp_nle_f32_sdwa,
  v_cmp_nlg_f16_sdwa,
  v_cmp_nlg_f32_sdwa,
  v_cmp_nlt_f16_sdwa,
  v_cmp_nlt_f32_sdwa,
  v_cmp_o_f16_sdwa,
  v_cmp_o_f32_sdwa,
  v_cmp_t_i16_sdwa,
  v_cmp_t_i32_sdwa,
  v_cmp_t_u16_sdwa,
  v_cmp_t_u32_sdwa,
  v_cmp_tru_f16_sdwa,
  v_cmp_tru_f32_sdwa,
  v_cmp_u_f16_sdwa,
  v_cmp_u_f32_sdwa,
  v_cmpx_class_f16_sdwa,
  v_cmpx_class_f32_sdwa,
  v_cmpx_eq_f16_sdwa,
  v_cmpx_eq_f32_sdwa,
  v_cmpx_eq_i16_sdwa,
  v_cmpx_eq_i32_sdwa,
  v_cmpx_eq_u16_sdwa,
  v_cmpx_eq_u32_sdwa,
  v_cmpx_f_f16_sdwa,
  v_cmpx_f_f32_sdwa,
  v_cmpx_f_i16_sdwa,
  v_cmpx_f_i32_sdwa,
  v_cmpx_f_u16_sdwa,
  v_cmpx_f_u32_sdwa,
  v_cmpx_ge_f16_sdwa,
  v_cmpx_ge_f32_sdwa,
  v_cmpx_ge_i16_sdwa,
  v_cmpx_ge_i32_sdwa,
  v_cmpx_ge_u16_sdwa,
  v_cmpx_ge_u32_sdwa,
  v_cmpx_gt_f16_sdwa,
  v_cmpx_gt_f32_sdwa,
  v_cmpx_gt_i16_sdwa,
  v_cmpx_gt_i32_sdwa,
  v_cmpx_gt_u16_sdwa,
  v_cmpx_gt_u32_sdwa,
  v_cmpx_le_f16_sdwa,
  v_cmpx_le_f32_sdwa,
  v_cmpx_le_i16_sdwa,
  v_cmpx_le_i32_sdwa,
  v_cmpx_le_u16_sdwa,
  v_cmpx_le_u32_sdwa,
  v_cmpx_lg_f16_sdwa,
  v_cmpx_lg_f32_sdwa,
  v_cmpx_lt_f16_sdwa,
  v_cmpx_lt_f32_sdwa,
  v_cmpx_lt_i16_sdwa,
  v_cmpx_lt_i32_sdwa,
  v_cmpx_lt_u16_sdwa,
  v_cmpx_lt_u32_sdwa,
  v_cmpx_ne_i16_sdwa,
  v_cmpx_ne_i32_sdwa,
  v_cmpx_ne_u16_sdwa,
  v_cmpx_ne_u32_sdwa,
  v_cmpx_neq_f16_sdwa,
  v_cmpx_neq_f32_sdwa,
  v_cmpx_nge_f16_sdwa,
  v_cmpx_nge_f32_sdwa,
  v_cmpx_ngt_f16_sdwa,
  v_cmpx_ngt_f32_sdwa,
  v_cmpx_nle_f16_sdwa,
  v_cmpx_nle_f32_sdwa,
  v_cmpx_nlg_f16_sdwa,
  v_cmpx_nlg_f32_sdwa,
  v_cmpx_nlt_f16_sdwa,
  v_cmpx_nlt_f32_sdwa,
  v_cmpx_o_f16_sdwa,
  v_cmpx_o_f32_sdwa,
  v_cmpx_t_i16_sdwa,
  v_cmpx_t_i32_sdwa,
  v_cmpx_t_u16_sdwa,
  v_cmpx_t_u32_sdwa,
  v_cmpx_tru_f16_sdwa,
  v_cmpx_tru_f32_sdwa,
  v_cmpx_u_f16_sdwa,
  v_cmpx_u_f32_sdwa
};

const operation ISA[] = {
    OP(NOP, 0, 0, 1, NOP, REGS(), REGS()),
    OP(s_buffer_load_dwordx2, 6, 0, 1, Load 2 dwords from ro memory via constant cache,
       REGS(1, 2), REGS(0)),
    OP(s_bfe_u32, 8, 0, 1, Bit Field Extract, REGS(1, 2), REGS(0)),
    OP(s_mov_b32, 7, 0, 1, generic 32bit move, REGS(1), REGS(0)),
    OP(s_add_u32, 8, 0, 1, generic 32bit add, REGS(1, 2), REGS(0)),
    OP(s_addc_u32, 8, 0, 1, generic 32bit add + SCC, REGS(1, 2), REGS(0)),
    OP(v_mov_b32, 13, 0, 1, generic 32bit move, REGS(1), REGS(0)),
    OP(flat_store_byte, 2, 0, 1, write(1) to somewhere(0), REGS(0, 1), REGS()),
    OP(s_waitcnt, 11, 0, 1, , REGS(0), REGS()),
    OP(s_endpgm, 11, 0, 1, , REGS(), REGS()),
    OP(s_load_dword, 6, 0, 1, , REGS(1, 2), REGS(0)),
    OP(s_load_dwordx2, 6, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_mov_b32_e32, 18, 0, 1, generic 32bit move, REGS(1), REGS(0)),
    OP(global_store_dwordx2, 2, 0, 1, , REGS(0, 1, 2), REGS()),
    OP(global_store_dword, 2, 0, 1, , REGS(0, 1, 2), REGS()),
    OP(global_store_short, 2, 0, 1, , REGS(0, 1, 2), REGS()),
    OP(global_store_dwordx4, 2, 0, 1, , REGS(0, 1, 2), REGS()),
    OP(s_and_b32, 8, 0, 1, , REGS(1, 2), REGS(0)),
    OP(s_mul_i32, 8, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_add_u32_e32, 18, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_add_co_u32_e32, 18, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_xor_b32_e32, 18, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_gt_u32_e32, 18, 0, 1, , REGS(1, 2), REGS(0)),
    OP(s_and_saveexec_b64, 7, 0, 1, , REGS(1), REGS(0)),
    OP(s_cbranch_execz, 11, 1, 1, , REGS(0), REGS()),
    OP(s_xor_b64, 8, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_or_b32_e32, 18, 0, 1, , REGS(), REGS()),
    OP(v_and_b32_e32, 18, 0, 1, , REGS(), REGS()),
    OP(v_not_b32_e32, 18, 0, 1, , REGS(), REGS()),
    OP(v_cndmask_b32_e64, 18, 0, 1, , REGS(1, 2, 3), REGS(0)),
    OP(v_cmp_lt_i32_e64, 18, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_lshrrev_b64, 15, 0, 1, , REGS(1, 2), REGS(0)),
    OP(s_or_saveexec_b64, 7, 0, 1, , REGS(1), REGS(0)),
    OP(v_cmp_ne_u64_e32, 18, 0, 1, , REGS(), REGS()),
    OP(v_cndmask_b32_e32, 18, 0, 1, , REGS(), REGS()),
    OP(s_lshl_b64, 8, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_lt_i32_e32, 18, 0, 1, , REGS(), REGS()),
    OP(s_add_i32, 8, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_addc_co_u32_e32, 18, 0, 1, , REGS(), REGS()),
    OP(buffer_atomic_add, 5, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(buffer_atomic_add_x2, 5, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(buffer_atomic_and, 5, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(buffer_atomic_and_x2, 5, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(buffer_atomic_cmpswap, 5, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(buffer_atomic_cmpswap_x2, 5, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(buffer_atomic_dec, 5, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(buffer_atomic_dec_x2, 5, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(buffer_atomic_fcmpswap, 5, 0, 0, , REGS(1, 2), REGS(0)),
    OP(buffer_atomic_fcmpswap_x2, 5, 0, 0, , REGS(1, 2), REGS(0)),
    OP(buffer_atomic_fmax, 5, 0, 0, , REGS(1, 2), REGS(0)),
    OP(buffer_atomic_fmax_x2, 5, 0, 0, , REGS(1, 2), REGS(0)),
    OP(buffer_atomic_fmin, 5, 0, 0, , REGS(1, 2), REGS(0)),
    OP(buffer_atomic_fmin_x2, 5, 0, 0, , REGS(1, 2), REGS(0)),
    OP(buffer_atomic_inc, 5, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(buffer_atomic_inc_x2, 5, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(buffer_atomic_or, 5, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(buffer_atomic_or_x2, 5, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(buffer_atomic_rsub, 5, 0, 0, , REGS(1, 2), REGS(0)),
    OP(buffer_atomic_rsub_x2, 5, 0, 0, , REGS(1, 2), REGS(0)),
    OP(buffer_atomic_smax, 5, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(buffer_atomic_smax_x2, 5, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(buffer_atomic_smin, 5, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(buffer_atomic_smin_x2, 5, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(buffer_atomic_sub, 5, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(buffer_atomic_sub_x2, 5, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(buffer_atomic_swap, 5, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(buffer_atomic_swap_x2, 5, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(buffer_atomic_umax, 5, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(buffer_atomic_umax_x2, 5, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(buffer_atomic_umin, 5, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(buffer_atomic_umin_x2, 5, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(buffer_atomic_xor, 5, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(buffer_atomic_xor_x2, 5, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(buffer_load_dword, 5, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(buffer_load_dwordx2, 5, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(buffer_load_dwordx3, 5, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(buffer_load_dwordx4, 5, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(buffer_load_format_d16_hi_x, 5, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(buffer_load_format_d16_x, 5, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(buffer_load_format_d16_xy, 5, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(buffer_load_format_d16_xyz, 5, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(buffer_load_format_d16_xyzw, 5, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(buffer_load_format_x, 5, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(buffer_load_format_xy, 5, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(buffer_load_format_xyz, 5, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(buffer_load_format_xyzw, 5, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(buffer_load_sbyte, 5, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(buffer_load_sbyte_d16, 5, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(buffer_load_sbyte_d16_hi, 5, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(buffer_load_short_d16, 5, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(buffer_load_short_d16_hi, 5, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(buffer_load_sshort, 5, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(buffer_load_ubyte, 5, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(buffer_load_ubyte_d16, 5, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(buffer_load_ubyte_d16_hi, 5, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(buffer_load_ushort, 5, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(buffer_store_byte, 5, 0, 0, , REGS(0, 1, 2, 3), REGS()),
    OP(buffer_store_byte_d16_hi, 5, 0, 0, , REGS(0, 1, 2, 3), REGS()),
    OP(buffer_store_dword, 5, 0, 0, , REGS(0, 1, 2, 3), REGS()),
    OP(buffer_store_dwordx2, 5, 0, 0, , REGS(0, 1, 2, 3), REGS()),
    OP(buffer_store_dwordx3, 5, 0, 0, , REGS(0, 1, 2, 3), REGS()),
    OP(buffer_store_dwordx4, 5, 0, 0, , REGS(0, 1, 2, 3), REGS()),
    OP(buffer_store_format_d16_hi_x, 5, 0, 0, , REGS(0, 1, 2, 3), REGS()),
    OP(buffer_store_format_d16_x, 5, 0, 0, , REGS(0, 1, 2, 3), REGS()),
    OP(buffer_store_format_d16_xy, 5, 0, 0, , REGS(0, 1, 2, 3), REGS()),
    OP(buffer_store_format_d16_xyz, 5, 0, 0, , REGS(0, 1, 2, 3), REGS()),
    OP(buffer_store_format_d16_xyzw, 5, 0, 0, , REGS(0, 1, 2, 3), REGS()),
    OP(buffer_store_format_x, 5, 0, 0, , REGS(0, 1, 2, 3), REGS()),
    OP(buffer_store_format_xy, 5, 0, 0, , REGS(0, 1, 2, 3), REGS()),
    OP(buffer_store_format_xyz, 5, 0, 0, , REGS(0, 1, 2, 3), REGS()),
    OP(buffer_store_format_xyzw, 5, 0, 0, , REGS(0, 1, 2, 3), REGS()),
    OP(buffer_store_lds_dword, 5, 0, 0, , REGS(0, 1), REGS()),
    OP(buffer_store_short, 5, 0, 0, , REGS(0, 1, 2, 3), REGS()),
    OP(buffer_store_short_d16_hi, 5, 0, 0, , REGS(0, 1, 2, 3), REGS()),
    OP(buffer_wbinvl1, 5, 0, 0, , REGS(1, 2), REGS(0)),
    OP(buffer_wbinvl1_sc, 5, 0, 0, , REGS(1, 2), REGS(0)),
    OP(buffer_wbinvl1_vol, 5, 0, 0, , REGS(1, 2), REGS(0)),
    OP(ds_add_f32, 0, 0, 0, , REGS(0, 1), REGS()),
    OP(ds_add_rtn_f32, 0, 0, 0, , REGS(1, 2), REGS(0)),
    OP(ds_add_rtn_u32, 0, 0, 0, , REGS(1, 2), REGS(0)),
    OP(ds_add_rtn_u64, 0, 0, 0, , REGS(1, 2), REGS(0)),
    OP(ds_add_src2_f32, 0, 0, 0, , REGS(1), REGS(0)),
    OP(ds_add_src2_u32, 0, 0, 0, , REGS(1), REGS(0)),
    OP(ds_add_src2_u64, 0, 0, 0, , REGS(1), REGS(0)),
    OP(ds_add_u32, 0, 0, 0, , REGS(0, 1), REGS()),
    OP(ds_add_u64, 0, 0, 0, , REGS(0, 1), REGS()),
    OP(ds_and_b32, 0, 0, 0, , REGS(0, 1), REGS()),
    OP(ds_and_b64, 0, 0, 0, , REGS(0, 1), REGS()),
    OP(ds_and_rtn_b32, 0, 0, 0, , REGS(1, 2), REGS(0)),
    OP(ds_and_rtn_b64, 0, 0, 0, , REGS(1, 2), REGS(0)),
    OP(ds_and_src2_b32, 0, 0, 0, , REGS(1), REGS(0)),
    OP(ds_and_src2_b64, 0, 0, 0, , REGS(1), REGS(0)),
    OP(ds_append, 0, 0, 0, , REGS(), REGS(0)),
    OP(ds_bpermute_b32, 0, 0, 0, , REGS(1, 2), REGS(0)),
    OP(ds_cmpst_b32, 0, 0, 0, , REGS(0, 1, 2), REGS()),
    OP(ds_cmpst_b64, 0, 0, 0, , REGS(0, 1, 2), REGS()),
    OP(ds_cmpst_f32, 0, 0, 0, , REGS(0, 1, 2), REGS()),
    OP(ds_cmpst_f64, 0, 0, 0, , REGS(0, 1, 2), REGS()),
    OP(ds_cmpst_rtn_b32, 0, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(ds_cmpst_rtn_b64, 0, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(ds_cmpst_rtn_f32, 0, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(ds_cmpst_rtn_f64, 0, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(ds_condxchg32_rtn_b128, 0, 0, 0, , REGS(1), REGS(0)),
    OP(ds_condxchg32_rtn_b64, 0, 0, 0, , REGS(1, 2), REGS(0)),
    OP(ds_consume, 0, 0, 0, , REGS(), REGS(0)),
    OP(ds_dec_rtn_u32, 0, 0, 0, , REGS(1, 2), REGS(0)),
    OP(ds_dec_rtn_u64, 0, 0, 0, , REGS(1, 2), REGS(0)),
    OP(ds_dec_src2_u32, 0, 0, 0, , REGS(1), REGS(0)),
    OP(ds_dec_src2_u64, 0, 0, 0, , REGS(1), REGS(0)),
    OP(ds_dec_u32, 0, 0, 0, , REGS(0, 1), REGS()),
    OP(ds_dec_u64, 0, 0, 0, , REGS(0, 1), REGS()),
    OP(ds_gws_barrier, 0, 0, 0, , REGS(0), REGS()),
    OP(ds_gws_init, 0, 0, 0, , REGS(0), REGS()),
    OP(ds_gws_sema_br, 0, 0, 0, , REGS(0), REGS()),
    OP(ds_gws_sema_p, 0, 0, 0, , REGS(1), REGS(0)),
    OP(ds_gws_sema_release_all, 0, 0, 0, , REGS(1), REGS(0)),
    OP(ds_gws_sema_v, 0, 0, 0, , REGS(1), REGS(0)),
    OP(ds_inc_rtn_u32, 0, 0, 0, , REGS(1, 2), REGS(0)),
    OP(ds_inc_rtn_u64, 0, 0, 0, , REGS(1, 2), REGS(0)),
    OP(ds_inc_src2_u32, 0, 0, 0, , REGS(1), REGS(0)),
    OP(ds_inc_src2_u64, 0, 0, 0, , REGS(1), REGS(0)),
    OP(ds_inc_u32, 0, 0, 0, , REGS(0, 1), REGS()),
    OP(ds_inc_u64, 0, 0, 0, , REGS(0, 1), REGS()),
    OP(ds_max_f32, 0, 0, 0, , REGS(0, 1), REGS()),
    OP(ds_max_f64, 0, 0, 0, , REGS(0, 1), REGS()),
    OP(ds_max_i32, 0, 0, 0, , REGS(0, 1), REGS()),
    OP(ds_max_i64, 0, 0, 0, , REGS(0, 1), REGS()),
    OP(ds_max_rtn_f32, 0, 0, 0, , REGS(1, 2), REGS(0)),
    OP(ds_max_rtn_f64, 0, 0, 0, , REGS(1, 2), REGS(0)),
    OP(ds_max_rtn_i32, 0, 0, 0, , REGS(1, 2), REGS(0)),
    OP(ds_max_rtn_i64, 0, 0, 0, , REGS(1, 2), REGS(0)),
    OP(ds_max_rtn_u32, 0, 0, 0, , REGS(1, 2), REGS(0)),
    OP(ds_max_rtn_u64, 0, 0, 0, , REGS(1, 2), REGS(0)),
    OP(ds_max_src2_f32, 0, 0, 0, , REGS(1), REGS(0)),
    OP(ds_max_src2_f64, 0, 0, 0, , REGS(1), REGS(0)),
    OP(ds_max_src2_i32, 0, 0, 0, , REGS(1), REGS(0)),
    OP(ds_max_src2_i64, 0, 0, 0, , REGS(1), REGS(0)),
    OP(ds_max_src2_u32, 0, 0, 0, , REGS(1), REGS(0)),
    OP(ds_max_src2_u64, 0, 0, 0, , REGS(1), REGS(0)),
    OP(ds_max_u32, 0, 0, 0, , REGS(0, 1), REGS()),
    OP(ds_max_u64, 0, 0, 0, , REGS(0, 1), REGS()),
    OP(ds_min_f32, 0, 0, 0, , REGS(0, 1), REGS()),
    OP(ds_min_f64, 0, 0, 0, , REGS(0, 1), REGS()),
    OP(ds_min_i32, 0, 0, 0, , REGS(0, 1), REGS()),
    OP(ds_min_i64, 0, 0, 0, , REGS(0, 1), REGS()),
    OP(ds_min_rtn_f32, 0, 0, 0, , REGS(1, 2), REGS(0)),
    OP(ds_min_rtn_f64, 0, 0, 0, , REGS(1, 2), REGS(0)),
    OP(ds_min_rtn_i32, 0, 0, 0, , REGS(1, 2), REGS(0)),
    OP(ds_min_rtn_i64, 0, 0, 0, , REGS(1, 2), REGS(0)),
    OP(ds_min_rtn_u32, 0, 0, 0, , REGS(1, 2), REGS(0)),
    OP(ds_min_rtn_u64, 0, 0, 0, , REGS(1, 2), REGS(0)),
    OP(ds_min_src2_f32, 0, 0, 0, , REGS(1), REGS(0)),
    OP(ds_min_src2_f64, 0, 0, 0, , REGS(1), REGS(0)),
    OP(ds_min_src2_i32, 0, 0, 0, , REGS(1), REGS(0)),
    OP(ds_min_src2_i64, 0, 0, 0, , REGS(1), REGS(0)),
    OP(ds_min_src2_u32, 0, 0, 0, , REGS(1), REGS(0)),
    OP(ds_min_src2_u64, 0, 0, 0, , REGS(1), REGS(0)),
    OP(ds_min_u32, 0, 0, 0, , REGS(0, 1), REGS()),
    OP(ds_min_u64, 0, 0, 0, , REGS(0, 1), REGS()),
    OP(ds_mskor_b32, 0, 0, 0, , REGS(0, 1, 2), REGS()),
    OP(ds_mskor_b64, 0, 0, 0, , REGS(0, 1, 2), REGS()),
    OP(ds_mskor_rtn_b32, 0, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(ds_mskor_rtn_b64, 0, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(ds_nop, 0, 0, 0, , REGS(1), REGS(0)),
    OP(ds_or_b32, 0, 0, 0, , REGS(0, 1), REGS()),
    OP(ds_or_b64, 0, 0, 0, , REGS(0, 1), REGS()),
    OP(ds_or_rtn_b32, 0, 0, 0, , REGS(1, 2), REGS(0)),
    OP(ds_or_rtn_b64, 0, 0, 0, , REGS(1, 2), REGS(0)),
    OP(ds_or_src2_b32, 0, 0, 0, , REGS(1), REGS(0)),
    OP(ds_or_src2_b64, 0, 0, 0, , REGS(1), REGS(0)),
    OP(ds_ordered_count, 0, 0, 0, , REGS(1), REGS(0)),
    OP(ds_permute_b32, 0, 0, 0, , REGS(1, 2), REGS(0)),
    OP(ds_read2_b32, 0, 0, 0, , REGS(1), REGS(0)),
    OP(ds_read2_b64, 0, 0, 0, , REGS(1), REGS(0)),
    OP(ds_read2st64_b32, 0, 0, 0, , REGS(1), REGS(0)),
    OP(ds_read2st64_b64, 0, 0, 0, , REGS(1), REGS(0)),
    OP(ds_read_addtid_b32, 0, 0, 0, , REGS(1), REGS(0)),
    OP(ds_read_b128, 0, 0, 0, , REGS(1), REGS(0)),
    OP(ds_read_b32, 0, 0, 0, , REGS(1), REGS(0)),
    OP(ds_read_b64, 0, 0, 0, , REGS(1), REGS(0)),
    OP(ds_read_b96, 0, 0, 0, , REGS(1), REGS(0)),
    OP(ds_read_i16, 0, 0, 0, , REGS(1), REGS(0)),
    OP(ds_read_i8, 0, 0, 0, , REGS(1), REGS(0)),
    OP(ds_read_i8_d16, 0, 0, 0, , REGS(1), REGS(0)),
    OP(ds_read_i8_d16_hi, 0, 0, 0, , REGS(1), REGS(0)),
    OP(ds_read_u16, 0, 0, 0, , REGS(1), REGS(0)),
    OP(ds_read_u16_d16, 0, 0, 0, , REGS(1), REGS(0)),
    OP(ds_read_u16_d16_hi, 0, 0, 0, , REGS(1), REGS(0)),
    OP(ds_read_u8, 0, 0, 0, , REGS(1), REGS(0)),
    OP(ds_read_u8_d16, 0, 0, 0, , REGS(1), REGS(0)),
    OP(ds_read_u8_d16_hi, 0, 0, 0, , REGS(1), REGS(0)),
    OP(ds_rsub_rtn_u32, 0, 0, 0, , REGS(1, 2), REGS(0)),
    OP(ds_rsub_rtn_u64, 0, 0, 0, , REGS(1, 2), REGS(0)),
    OP(ds_rsub_src2_u32, 0, 0, 0, , REGS(1), REGS(0)),
    OP(ds_rsub_src2_u64, 0, 0, 0, , REGS(1), REGS(0)),
    OP(ds_rsub_u32, 0, 0, 0, , REGS(0, 1), REGS()),
    OP(ds_rsub_u64, 0, 0, 0, , REGS(0, 1), REGS()),
    OP(ds_sub_rtn_u32, 0, 0, 0, , REGS(1, 2), REGS(0)),
    OP(ds_sub_rtn_u64, 0, 0, 0, , REGS(1, 2), REGS(0)),
    OP(ds_sub_src2_u32, 0, 0, 0, , REGS(1), REGS(0)),
    OP(ds_sub_src2_u64, 0, 0, 0, , REGS(1), REGS(0)),
    OP(ds_sub_u32, 0, 0, 0, , REGS(0, 1), REGS()),
    OP(ds_sub_u64, 0, 0, 0, , REGS(0, 1), REGS()),
    OP(ds_swizzle_b32, 0, 0, 0, , REGS(1), REGS(0)),
    OP(ds_wrap_rtn_b32, 0, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(ds_write2_b32, 0, 0, 0, , REGS(0, 1, 2), REGS()),
    OP(ds_write2_b64, 0, 0, 0, , REGS(0, 1, 2), REGS()),
    OP(ds_write2st64_b32, 0, 0, 0, , REGS(0, 1, 2), REGS()),
    OP(ds_write2st64_b64, 0, 0, 0, , REGS(0, 1, 2), REGS()),
    OP(ds_write_addtid_b32, 0, 0, 0, , REGS(1), REGS(0)),
    OP(ds_write_b128, 0, 0, 0, , REGS(0, 1), REGS()),
    OP(ds_write_b16, 0, 0, 0, , REGS(0, 1), REGS()),
    OP(ds_write_b16_d16_hi, 0, 0, 0, , REGS(0, 1), REGS()),
    OP(ds_write_b32, 0, 0, 0, , REGS(0, 1), REGS()),
    OP(ds_write_b64, 0, 0, 0, , REGS(0, 1), REGS()),
    OP(ds_write_b8, 0, 0, 0, , REGS(0, 1), REGS()),
    OP(ds_write_b8_d16_hi, 0, 0, 0, , REGS(0, 1), REGS()),
    OP(ds_write_b96, 0, 0, 0, , REGS(0, 1), REGS()),
    OP(ds_write_src2_b32, 0, 0, 0, , REGS(1), REGS(0)),
    OP(ds_write_src2_b64, 0, 0, 0, , REGS(1), REGS(0)),
    OP(ds_wrxchg2_rtn_b32, 0, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(ds_wrxchg2_rtn_b64, 0, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(ds_wrxchg2st64_rtn_b32, 0, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(ds_wrxchg2st64_rtn_b64, 0, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(ds_wrxchg_rtn_b32, 0, 0, 0, , REGS(1, 2), REGS(0)),
    OP(ds_wrxchg_rtn_b64, 0, 0, 0, , REGS(1, 2), REGS(0)),
    OP(ds_xor_b32, 0, 0, 0, , REGS(0, 1), REGS()),
    OP(ds_xor_b64, 0, 0, 0, , REGS(0, 1), REGS()),
    OP(ds_xor_rtn_b32, 0, 0, 0, , REGS(1, 2), REGS(0)),
    OP(ds_xor_rtn_b64, 0, 0, 0, , REGS(1, 2), REGS(0)),
    OP(ds_xor_src2_b32, 0, 0, 0, , REGS(1), REGS(0)),
    OP(ds_xor_src2_b64, 0, 0, 0, , REGS(1), REGS(0)),
    OP(exp, 1, 0, 0, , REGS(1, 2, 3, 4), REGS(0)),
    OP(flat_atomic_add, 2, 0, 0, , REGS(1, 2), REGS(0)),
    OP(flat_atomic_add_x2, 2, 0, 0, , REGS(1, 2), REGS(0)),
    OP(flat_atomic_and, 2, 0, 0, , REGS(1, 2), REGS(0)),
    OP(flat_atomic_and_x2, 2, 0, 0, , REGS(1, 2), REGS(0)),
    OP(flat_atomic_cmpswap, 2, 0, 0, , REGS(1, 2), REGS(0)),
    OP(flat_atomic_cmpswap_x2, 2, 0, 0, , REGS(1, 2), REGS(0)),
    OP(flat_atomic_dec, 2, 0, 0, , REGS(1, 2), REGS(0)),
    OP(flat_atomic_dec_x2, 2, 0, 0, , REGS(1, 2), REGS(0)),
    OP(flat_atomic_fcmpswap, 2, 0, 0, , REGS(1, 2), REGS(0)),
    OP(flat_atomic_fcmpswap_x2, 2, 0, 0, , REGS(1, 2), REGS(0)),
    OP(flat_atomic_fmax, 2, 0, 0, , REGS(1, 2), REGS(0)),
    OP(flat_atomic_fmax_x2, 2, 0, 0, , REGS(1, 2), REGS(0)),
    OP(flat_atomic_fmin, 2, 0, 0, , REGS(1, 2), REGS(0)),
    OP(flat_atomic_fmin_x2, 2, 0, 0, , REGS(1, 2), REGS(0)),
    OP(flat_atomic_inc, 2, 0, 0, , REGS(1, 2), REGS(0)),
    OP(flat_atomic_inc_x2, 2, 0, 0, , REGS(1, 2), REGS(0)),
    OP(flat_atomic_or, 2, 0, 0, , REGS(1, 2), REGS(0)),
    OP(flat_atomic_or_x2, 2, 0, 0, , REGS(1, 2), REGS(0)),
    OP(flat_atomic_smax, 2, 0, 0, , REGS(1, 2), REGS(0)),
    OP(flat_atomic_smax_x2, 2, 0, 0, , REGS(1, 2), REGS(0)),
    OP(flat_atomic_smin, 2, 0, 0, , REGS(1, 2), REGS(0)),
    OP(flat_atomic_smin_x2, 2, 0, 0, , REGS(1, 2), REGS(0)),
    OP(flat_atomic_sub, 2, 0, 0, , REGS(1, 2), REGS(0)),
    OP(flat_atomic_sub_x2, 2, 0, 0, , REGS(1, 2), REGS(0)),
    OP(flat_atomic_swap, 2, 0, 0, , REGS(1, 2), REGS(0)),
    OP(flat_atomic_swap_x2, 2, 0, 0, , REGS(1, 2), REGS(0)),
    OP(flat_atomic_umax, 2, 0, 0, , REGS(1, 2), REGS(0)),
    OP(flat_atomic_umax_x2, 2, 0, 0, , REGS(1, 2), REGS(0)),
    OP(flat_atomic_umin, 2, 0, 0, , REGS(1, 2), REGS(0)),
    OP(flat_atomic_umin_x2, 2, 0, 0, , REGS(1, 2), REGS(0)),
    OP(flat_atomic_xor, 2, 0, 0, , REGS(1, 2), REGS(0)),
    OP(flat_atomic_xor_x2, 2, 0, 0, , REGS(1, 2), REGS(0)),
    OP(flat_load_dword, 2, 0, 0, , REGS(1), REGS(0)),
    OP(flat_load_dwordx2, 2, 0, 0, , REGS(1), REGS(0)),
    OP(flat_load_dwordx3, 2, 0, 0, , REGS(1), REGS(0)),
    OP(flat_load_dwordx4, 2, 0, 0, , REGS(1), REGS(0)),
    OP(flat_load_sbyte, 2, 0, 0, , REGS(1), REGS(0)),
    OP(flat_load_sbyte_d16, 2, 0, 0, , REGS(1), REGS(0)),
    OP(flat_load_sbyte_d16_hi, 2, 0, 0, , REGS(1), REGS(0)),
    OP(flat_load_short_d16, 2, 0, 0, , REGS(1), REGS(0)),
    OP(flat_load_short_d16_hi, 2, 0, 0, , REGS(1), REGS(0)),
    OP(flat_load_sshort, 2, 0, 0, , REGS(1), REGS(0)),
    OP(flat_load_ubyte, 2, 0, 0, , REGS(1), REGS(0)),
    OP(flat_load_ubyte_d16, 2, 0, 0, , REGS(1), REGS(0)),
    OP(flat_load_ubyte_d16_hi, 2, 0, 0, , REGS(1), REGS(0)),
    OP(flat_load_ushort, 2, 0, 0, , REGS(1), REGS(0)),
    OP(flat_store_byte_d16_hi, 2, 0, 0, , REGS(0, 1), REGS()),
    OP(flat_store_dword, 2, 0, 0, , REGS(0, 1), REGS()),
    OP(flat_store_dwordx2, 2, 0, 0, , REGS(0, 1), REGS()),
    OP(flat_store_dwordx3, 2, 0, 0, , REGS(0, 1), REGS()),
    OP(flat_store_dwordx4, 2, 0, 0, , REGS(0, 1), REGS()),
    OP(flat_store_short, 2, 0, 0, , REGS(0, 1), REGS()),
    OP(flat_store_short_d16_hi, 2, 0, 0, , REGS(0, 1), REGS()),
    OP(global_atomic_add, 2, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(global_atomic_add_x2, 2, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(global_atomic_and, 2, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(global_atomic_and_x2, 2, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(global_atomic_cmpswap, 2, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(global_atomic_cmpswap_x2, 2, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(global_atomic_dec, 2, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(global_atomic_dec_x2, 2, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(global_atomic_inc, 2, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(global_atomic_inc_x2, 2, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(global_atomic_or, 2, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(global_atomic_or_x2, 2, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(global_atomic_smax, 2, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(global_atomic_smax_x2, 2, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(global_atomic_smin, 2, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(global_atomic_smin_x2, 2, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(global_atomic_sub, 2, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(global_atomic_sub_x2, 2, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(global_atomic_swap, 2, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(global_atomic_swap_x2, 2, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(global_atomic_umax, 2, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(global_atomic_umax_x2, 2, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(global_atomic_umin, 2, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(global_atomic_umin_x2, 2, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(global_atomic_xor, 2, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(global_atomic_xor_x2, 2, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(global_load_dword, 2, 0, 0, , REGS(1, 2), REGS(0)),
    OP(global_load_dwordx2, 2, 0, 0, , REGS(1, 2), REGS(0)),
    OP(global_load_dwordx3, 2, 0, 0, , REGS(1, 2), REGS(0)),
    OP(global_load_dwordx4, 2, 0, 0, , REGS(1, 2), REGS(0)),
    OP(global_load_sbyte, 2, 0, 0, , REGS(1, 2), REGS(0)),
    OP(global_load_sbyte_d16, 2, 0, 0, , REGS(1, 2), REGS(0)),
    OP(global_load_sbyte_d16_hi, 2, 0, 0, , REGS(1, 2), REGS(0)),
    OP(global_load_short_d16, 2, 0, 0, , REGS(1, 2), REGS(0)),
    OP(global_load_short_d16_hi, 2, 0, 0, , REGS(1, 2), REGS(0)),
    OP(global_load_sshort, 2, 0, 0, , REGS(1, 2), REGS(0)),
    OP(global_load_ubyte, 2, 0, 0, , REGS(1, 2), REGS(0)),
    OP(global_load_ubyte_d16, 2, 0, 0, , REGS(1, 2), REGS(0)),
    OP(global_load_ubyte_d16_hi, 2, 0, 0, , REGS(1, 2), REGS(0)),
    OP(global_load_ushort, 2, 0, 0, , REGS(1, 2), REGS(0)),
    OP(global_store_byte, 2, 0, 0, , REGS(0, 1, 2), REGS()),
    OP(global_store_byte_d16_hi, 2, 0, 0, , REGS(0, 1, 2), REGS()),
    OP(global_store_dwordx3, 2, 0, 0, , REGS(0, 1, 2), REGS()),
    OP(global_store_short_d16_hi, 2, 0, 0, , REGS(0, 1, 2), REGS()),
    OP(image_atomic_add, 3, 0, 0, , REGS(1, 2), REGS(0)),
    OP(image_atomic_and, 3, 0, 0, , REGS(1, 2), REGS(0)),
    OP(image_atomic_cmpswap, 3, 0, 0, , REGS(1, 2), REGS(0)),
    OP(image_atomic_dec, 3, 0, 0, , REGS(1, 2), REGS(0)),
    OP(image_atomic_fcmpswap, 3, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(image_atomic_fmax, 3, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(image_atomic_fmin, 3, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(image_atomic_inc, 3, 0, 0, , REGS(1, 2), REGS(0)),
    OP(image_atomic_or, 3, 0, 0, , REGS(1, 2), REGS(0)),
    OP(image_atomic_rsub, 3, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(image_atomic_smax, 3, 0, 0, , REGS(1, 2), REGS(0)),
    OP(image_atomic_smin, 3, 0, 0, , REGS(1, 2), REGS(0)),
    OP(image_atomic_sub, 3, 0, 0, , REGS(1, 2), REGS(0)),
    OP(image_atomic_swap, 3, 0, 0, , REGS(1, 2), REGS(0)),
    OP(image_atomic_umax, 3, 0, 0, , REGS(1, 2), REGS(0)),
    OP(image_atomic_umin, 3, 0, 0, , REGS(1, 2), REGS(0)),
    OP(image_atomic_xor, 3, 0, 0, , REGS(1, 2), REGS(0)),
    OP(image_gather4, 3, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(image_gather4_b, 3, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(image_gather4_b_cl, 3, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(image_gather4_b_cl_o, 3, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(image_gather4_b_o, 3, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(image_gather4_c, 3, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(image_gather4_c_b, 3, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(image_gather4_c_b_cl, 3, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(image_gather4_c_b_cl_o, 3, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(image_gather4_c_b_o, 3, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(image_gather4_c_cl, 3, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(image_gather4_c_cl_o, 3, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(image_gather4_c_l, 3, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(image_gather4_c_l_o, 3, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(image_gather4_c_lz, 3, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(image_gather4_c_lz_o, 3, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(image_gather4_c_o, 3, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(image_gather4_cl, 3, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(image_gather4_cl_o, 3, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(image_gather4_l, 3, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(image_gather4_l_o, 3, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(image_gather4_lz, 3, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(image_gather4_lz_o, 3, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(image_gather4_o, 3, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(image_gather4h, 3, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(image_gather4h_pck, 3, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(image_gather8h_pck, 3, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(image_get_lod, 3, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(image_get_resinfo, 3, 0, 0, , REGS(1, 2), REGS(0)),
    OP(image_load, 3, 0, 0, , REGS(1, 2), REGS(0)),
    OP(image_load_mip, 3, 0, 0, , REGS(1, 2), REGS(0)),
    OP(image_load_mip_pck, 3, 0, 0, , REGS(1, 2), REGS(0)),
    OP(image_load_mip_pck_sgn, 3, 0, 0, , REGS(1, 2), REGS(0)),
    OP(image_load_pck, 3, 0, 0, , REGS(1, 2), REGS(0)),
    OP(image_load_pck_sgn, 3, 0, 0, , REGS(1, 2), REGS(0)),
    OP(image_rsrc256, 3, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(image_sample, 3, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(image_sample_b, 3, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(image_sample_b_cl, 3, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(image_sample_b_cl_o, 3, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(image_sample_b_o, 3, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(image_sample_c, 3, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(image_sample_c_b, 3, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(image_sample_c_b_cl, 3, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(image_sample_c_b_cl_o, 3, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(image_sample_c_b_o, 3, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(image_sample_c_cd, 3, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(image_sample_c_cd_cl, 3, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(image_sample_c_cd_cl_o, 3, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(image_sample_c_cd_o, 3, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(image_sample_c_cl, 3, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(image_sample_c_cl_o, 3, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(image_sample_c_d, 3, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(image_sample_c_d_cl, 3, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(image_sample_c_d_cl_o, 3, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(image_sample_c_d_o, 3, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(image_sample_c_l, 3, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(image_sample_c_l_o, 3, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(image_sample_c_lz, 3, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(image_sample_c_lz_o, 3, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(image_sample_c_o, 3, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(image_sample_cd, 3, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(image_sample_cd_cl, 3, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(image_sample_cd_cl_o, 3, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(image_sample_cd_o, 3, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(image_sample_cl, 3, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(image_sample_cl_o, 3, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(image_sample_d, 3, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(image_sample_d_cl, 3, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(image_sample_d_cl_o, 3, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(image_sample_d_o, 3, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(image_sample_l, 3, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(image_sample_l_o, 3, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(image_sample_lz, 3, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(image_sample_lz_o, 3, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(image_sample_o, 3, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(image_sampler, 3, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(image_store, 3, 0, 0, , REGS(0, 1, 2), REGS()),
    OP(image_store_mip, 3, 0, 0, , REGS(0, 1, 2), REGS()),
    OP(image_store_mip_pck, 3, 0, 0, , REGS(0, 1, 2), REGS()),
    OP(image_store_pck, 3, 0, 0, , REGS(0, 1, 2), REGS()),
    OP(s_abs_i32, 7, 0, 0, , REGS(1), REGS(0)),
    OP(s_absdiff_i32, 8, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_addk_i32, 10, 0, 0, , REGS(1), REGS(0)),
    OP(s_and_b64, 8, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_andn1_saveexec_b64, 7, 0, 0, , REGS(1), REGS(0)),
    OP(s_andn1_wrexec_b64, 7, 0, 0, , REGS(1), REGS(0)),
    OP(s_andn2_b32, 8, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_andn2_b64, 8, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_andn2_saveexec_b64, 7, 0, 0, , REGS(1), REGS(0)),
    OP(s_andn2_wrexec_b64, 7, 0, 0, , REGS(1), REGS(0)),
    OP(s_ashr_i32, 8, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_ashr_i64, 8, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_atc_probe, 6, 0, 0, , REGS(0, 1, 2), REGS()),
    OP(s_atc_probe_buffer, 6, 0, 0, , REGS(0, 1, 2), REGS()),
    OP(s_atomic_add, 6, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_atomic_add_x2, 6, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_atomic_and, 6, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_atomic_and_x2, 6, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_atomic_cmpswap, 6, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_atomic_cmpswap_x2, 6, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_atomic_dec, 6, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_atomic_dec_x2, 6, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_atomic_inc, 6, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_atomic_inc_x2, 6, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_atomic_or, 6, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_atomic_or_x2, 6, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_atomic_smax, 6, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_atomic_smax_x2, 6, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_atomic_smin, 6, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_atomic_smin_x2, 6, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_atomic_sub, 6, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_atomic_sub_x2, 6, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_atomic_swap, 6, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_atomic_swap_x2, 6, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_atomic_umax, 6, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_atomic_umax_x2, 6, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_atomic_umin, 6, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_atomic_umin_x2, 6, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_atomic_xor, 6, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_atomic_xor_x2, 6, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_barrier, 11, 0, 0, , REGS(), REGS()),
    OP(s_bcnt0_i32_b32, 7, 0, 0, , REGS(1), REGS(0)),
    OP(s_bcnt0_i32_b64, 7, 0, 0, , REGS(1), REGS(0)),
    OP(s_bcnt1_i32_b32, 7, 0, 0, , REGS(1), REGS(0)),
    OP(s_bcnt1_i32_b64, 7, 0, 0, , REGS(1), REGS(0)),
    OP(s_bfe_i32, 8, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_bfe_i64, 8, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_bfe_u64, 8, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_bfm_b32, 8, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_bfm_b64, 8, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_bitcmp0_b32, 9, 0, 0, , REGS(0, 1), REGS()),
    OP(s_bitcmp0_b64, 9, 0, 0, , REGS(0, 1), REGS()),
    OP(s_bitcmp1_b32, 9, 0, 0, , REGS(0, 1), REGS()),
    OP(s_bitcmp1_b64, 9, 0, 0, , REGS(0, 1), REGS()),
    OP(s_bitreplicate_b64_b32, 7, 0, 0, , REGS(1), REGS(0)),
    OP(s_bitset0_b32, 7, 0, 0, , REGS(1), REGS(0)),
    OP(s_bitset0_b64, 7, 0, 0, , REGS(1), REGS(0)),
    OP(s_bitset1_b32, 7, 0, 0, , REGS(1), REGS(0)),
    OP(s_bitset1_b64, 7, 0, 0, , REGS(1), REGS(0)),
    OP(s_branch, 11, 0, 0, , REGS(0), REGS()),
    OP(s_brev_b32, 7, 0, 0, , REGS(1), REGS(0)),
    OP(s_brev_b64, 7, 0, 0, , REGS(1), REGS(0)),
    OP(s_buffer_atomic_add, 6, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_buffer_atomic_add_x2, 6, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_buffer_atomic_and, 6, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_buffer_atomic_and_x2, 6, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_buffer_atomic_cmpswap, 6, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_buffer_atomic_cmpswap_x2, 6, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_buffer_atomic_dec, 6, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_buffer_atomic_dec_x2, 6, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_buffer_atomic_inc, 6, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_buffer_atomic_inc_x2, 6, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_buffer_atomic_or, 6, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_buffer_atomic_or_x2, 6, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_buffer_atomic_smax, 6, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_buffer_atomic_smax_x2, 6, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_buffer_atomic_smin, 6, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_buffer_atomic_smin_x2, 6, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_buffer_atomic_sub, 6, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_buffer_atomic_sub_x2, 6, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_buffer_atomic_swap, 6, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_buffer_atomic_swap_x2, 6, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_buffer_atomic_umax, 6, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_buffer_atomic_umax_x2, 6, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_buffer_atomic_umin, 6, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_buffer_atomic_umin_x2, 6, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_buffer_atomic_xor, 6, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_buffer_atomic_xor_x2, 6, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_buffer_load_dword, 6, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_buffer_load_dwordx16, 6, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_buffer_load_dwordx4, 6, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_buffer_load_dwordx8, 6, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_buffer_store_dword, 6, 0, 0, , REGS(0, 1, 2), REGS()),
    OP(s_buffer_store_dwordx2, 6, 0, 0, , REGS(0, 1, 2), REGS()),
    OP(s_buffer_store_dwordx4, 6, 0, 0, , REGS(0, 1, 2), REGS()),
    OP(s_call_b64, 10, 0, 0, , REGS(1), REGS(0)),
    OP(s_cbranch_cdbgsys, 11, 0, 0, , REGS(0), REGS()),
    OP(s_cbranch_cdbgsys_and_user, 11, 0, 0, , REGS(0), REGS()),
    OP(s_cbranch_cdbgsys_or_user, 11, 0, 0, , REGS(0), REGS()),
    OP(s_cbranch_cdbguser, 11, 0, 0, , REGS(0), REGS()),
    OP(s_cbranch_execnz, 11, 0, 0, , REGS(0), REGS()),
    OP(s_cbranch_g_fork, 8, 0, 0, , REGS(0, 1), REGS()),
    OP(s_cbranch_i_fork, 10, 0, 0, , REGS(0, 1), REGS()),
    OP(s_cbranch_join, 7, 0, 0, , REGS(0), REGS()),
    OP(s_cbranch_scc0, 11, 0, 0, , REGS(0), REGS()),
    OP(s_cbranch_scc1, 11, 0, 0, , REGS(0), REGS()),
    OP(s_cbranch_vccnz, 11, 0, 0, , REGS(0), REGS()),
    OP(s_cbranch_vccz, 11, 0, 0, , REGS(0), REGS()),
    OP(s_cmov_b32, 7, 0, 0, , REGS(1), REGS(0)),
    OP(s_cmov_b64, 7, 0, 0, , REGS(1), REGS(0)),
    OP(s_cmovk_i32, 10, 0, 0, , REGS(1), REGS(0)),
    OP(s_cmp_eq_i32, 9, 0, 0, , REGS(0, 1), REGS()),
    OP(s_cmp_eq_u32, 9, 0, 0, , REGS(0, 1), REGS()),
    OP(s_cmp_eq_u64, 9, 0, 0, , REGS(0, 1), REGS()),
    OP(s_cmp_ge_i32, 9, 0, 0, , REGS(0, 1), REGS()),
    OP(s_cmp_ge_u32, 9, 0, 0, , REGS(0, 1), REGS()),
    OP(s_cmp_gt_i32, 9, 0, 0, , REGS(0, 1), REGS()),
    OP(s_cmp_gt_u32, 9, 0, 0, , REGS(0, 1), REGS()),
    OP(s_cmp_le_i32, 9, 0, 0, , REGS(0, 1), REGS()),
    OP(s_cmp_le_u32, 9, 0, 0, , REGS(0, 1), REGS()),
    OP(s_cmp_lg_i32, 9, 0, 0, , REGS(0, 1), REGS()),
    OP(s_cmp_lg_u32, 9, 0, 0, , REGS(0, 1), REGS()),
    OP(s_cmp_lg_u64, 9, 0, 0, , REGS(0, 1), REGS()),
    OP(s_cmp_lt_i32, 9, 0, 0, , REGS(0, 1), REGS()),
    OP(s_cmp_lt_u32, 9, 0, 0, , REGS(0, 1), REGS()),
    OP(s_cmpk_eq_i32, 10, 0, 0, , REGS(0, 1), REGS()),
    OP(s_cmpk_eq_u32, 10, 0, 0, , REGS(0, 1), REGS()),
    OP(s_cmpk_ge_i32, 10, 0, 0, , REGS(0, 1), REGS()),
    OP(s_cmpk_ge_u32, 10, 0, 0, , REGS(0, 1), REGS()),
    OP(s_cmpk_gt_i32, 10, 0, 0, , REGS(0, 1), REGS()),
    OP(s_cmpk_gt_u32, 10, 0, 0, , REGS(0, 1), REGS()),
    OP(s_cmpk_le_i32, 10, 0, 0, , REGS(0, 1), REGS()),
    OP(s_cmpk_le_u32, 10, 0, 0, , REGS(0, 1), REGS()),
    OP(s_cmpk_lg_i32, 10, 0, 0, , REGS(0, 1), REGS()),
    OP(s_cmpk_lg_u32, 10, 0, 0, , REGS(0, 1), REGS()),
    OP(s_cmpk_lt_i32, 10, 0, 0, , REGS(0, 1), REGS()),
    OP(s_cmpk_lt_u32, 10, 0, 0, , REGS(0, 1), REGS()),
    OP(s_cselect_b32, 8, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_cselect_b64, 8, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_dcache_discard, 6, 0, 0, , REGS(0, 1), REGS()),
    OP(s_dcache_discard_x2, 6, 0, 0, , REGS(0, 1), REGS()),
    OP(s_dcache_inv, 6, 0, 0, , REGS(), REGS()),
    OP(s_dcache_inv_vol, 6, 0, 0, , REGS(), REGS()),
    OP(s_dcache_wb, 6, 0, 0, , REGS(), REGS()),
    OP(s_dcache_wb_vol, 6, 0, 0, , REGS(), REGS()),
    OP(s_decperflevel, 11, 0, 0, , REGS(0), REGS()),
    OP(s_endpgm_ordered_ps_done, 11, 0, 0, , REGS(), REGS()),
    OP(s_endpgm_saved, 11, 0, 0, , REGS(), REGS()),
    OP(s_ff0_i32_b32, 7, 0, 0, , REGS(1), REGS(0)),
    OP(s_ff0_i32_b64, 7, 0, 0, , REGS(1), REGS(0)),
    OP(s_ff1_i32_b32, 7, 0, 0, , REGS(1), REGS(0)),
    OP(s_ff1_i32_b64, 7, 0, 0, , REGS(1), REGS(0)),
    OP(s_flbit_i32, 7, 0, 0, , REGS(1), REGS(0)),
    OP(s_flbit_i32_b32, 7, 0, 0, , REGS(1), REGS(0)),
    OP(s_flbit_i32_b64, 7, 0, 0, , REGS(1), REGS(0)),
    OP(s_flbit_i32_i64, 7, 0, 0, , REGS(1), REGS(0)),
    OP(s_getpc_b64, 7, 0, 0, , REGS(), REGS(0)),
    OP(s_getreg_b32, 10, 0, 0, , REGS(1), REGS(0)),
    OP(s_getreg_regrd_b32, 10, 0, 0, , REGS(), REGS()),
    OP(s_icache_inv, 11, 0, 0, , REGS(), REGS()),
    OP(s_incperflevel, 11, 0, 0, , REGS(0), REGS()),
    OP(s_load_dwordx16, 6, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_load_dwordx4, 6, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_load_dwordx8, 6, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_lshl1_add_u32, 8, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_lshl2_add_u32, 8, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_lshl3_add_u32, 8, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_lshl4_add_u32, 8, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_lshl_b32, 8, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_lshr_b32, 8, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_lshr_b64, 8, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_max_i32, 8, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_max_u32, 8, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_memrealtime, 6, 0, 0, , REGS(), REGS(0)),
    OP(s_memtime, 6, 0, 0, , REGS(), REGS(0)),
    OP(s_min_i32, 8, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_min_u32, 8, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_mov_b64, 7, 0, 0, , REGS(1), REGS(0)),
    OP(s_mov_fed_b32, 7, 0, 0, , REGS(1), REGS(0)),
    OP(s_mov_regrd_b32, 7, 0, 0, , REGS(), REGS()),
    OP(s_movk_i32, 10, 0, 0, , REGS(1), REGS(0)),
    OP(s_movreld_b32, 7, 0, 0, , REGS(1), REGS(0)),
    OP(s_movreld_b64, 7, 0, 0, , REGS(1), REGS(0)),
    OP(s_movrels_b32, 7, 0, 0, , REGS(1), REGS(0)),
    OP(s_movrels_b64, 7, 0, 0, , REGS(1), REGS(0)),
    OP(s_mul_hi_i32, 8, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_mul_hi_u32, 8, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_mulk_i32, 10, 0, 0, , REGS(1), REGS(0)),
    OP(s_nand_b32, 8, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_nand_b64, 8, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_nand_saveexec_b64, 7, 0, 0, , REGS(1), REGS(0)),
    OP(s_nop, 11, 0, 0, , REGS(0), REGS()),
    OP(s_nor_b32, 8, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_nor_b64, 8, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_nor_saveexec_b64, 7, 0, 0, , REGS(1), REGS(0)),
    OP(s_not_b32, 7, 0, 0, , REGS(1), REGS(0)),
    OP(s_not_b64, 7, 0, 0, , REGS(1), REGS(0)),
    OP(s_or_b32, 8, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_or_b64, 8, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_orn1_saveexec_b64, 7, 0, 0, , REGS(1), REGS(0)),
    OP(s_orn2_b32, 8, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_orn2_b64, 8, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_orn2_saveexec_b64, 7, 0, 0, , REGS(1), REGS(0)),
    OP(s_pack_hh_b32_b16, 8, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_pack_lh_b32_b16, 8, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_pack_ll_b32_b16, 8, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_quadmask_b32, 7, 0, 0, , REGS(1), REGS(0)),
    OP(s_quadmask_b64, 7, 0, 0, , REGS(1), REGS(0)),
    OP(s_rfe_b64, 7, 0, 0, , REGS(0), REGS()),
    OP(s_rfe_restore_b64, 8, 0, 0, , REGS(0, 1), REGS()),
    OP(s_scratch_load_dword, 6, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_scratch_load_dwordx2, 6, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_scratch_load_dwordx4, 6, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_scratch_store_dword, 6, 0, 0, , REGS(0, 1, 2), REGS()),
    OP(s_scratch_store_dwordx2, 6, 0, 0, , REGS(0, 1, 2), REGS()),
    OP(s_scratch_store_dwordx4, 6, 0, 0, , REGS(0, 1, 2), REGS()),
    OP(s_sendmsg, 11, 0, 0, , REGS(0), REGS()),
    OP(s_sendmsghalt, 11, 0, 0, , REGS(0), REGS()),
    OP(s_set_gpr_idx_idx, 7, 0, 0, , REGS(0), REGS()),
    OP(s_set_gpr_idx_mode, 11, 0, 0, , REGS(0), REGS()),
    OP(s_set_gpr_idx_off, 11, 0, 0, , REGS(), REGS()),
    OP(s_set_gpr_idx_on, 9, 0, 0, , REGS(0, 1), REGS()),
    OP(s_sethalt, 11, 0, 0, , REGS(0), REGS()),
    OP(s_setkill, 11, 0, 0, , REGS(0), REGS()),
    OP(s_setpc_b64, 7, 0, 0, , REGS(0), REGS()),
    OP(s_setprio, 11, 0, 0, , REGS(0), REGS()),
    OP(s_setreg_b32, 10, 0, 0, , REGS(1), REGS(0)),
    OP(s_setreg_imm32_b32, 10, 0, 0, , REGS(1), REGS(0)),
    OP(s_setvskip, 9, 0, 0, , REGS(0, 1), REGS()),
    OP(s_sext_i32_i16, 7, 0, 0, , REGS(1), REGS(0)),
    OP(s_sext_i32_i8, 7, 0, 0, , REGS(1), REGS(0)),
    OP(s_sleep, 11, 0, 0, , REGS(0), REGS()),
    OP(s_store_dword, 6, 0, 0, , REGS(0, 1, 2), REGS()),
    OP(s_store_dwordx2, 6, 0, 0, , REGS(0, 1, 2), REGS()),
    OP(s_store_dwordx4, 6, 0, 0, , REGS(0, 1, 2), REGS()),
    OP(s_sub_i32, 8, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_sub_u32, 8, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_subb_u32, 8, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_swappc_b64, 7, 0, 0, , REGS(1), REGS(0)),
    OP(s_trap, 11, 0, 0, , REGS(0), REGS()),
    OP(s_ttracedata, 11, 0, 0, , REGS(), REGS()),
    OP(s_wakeup, 11, 0, 0, , REGS(), REGS()),
    OP(s_wqm_b32, 7, 0, 0, , REGS(1), REGS(0)),
    OP(s_wqm_b64, 7, 0, 0, , REGS(1), REGS(0)),
    OP(s_xnor_b32, 8, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_xnor_b64, 8, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_xnor_saveexec_b64, 7, 0, 0, , REGS(1), REGS(0)),
    OP(s_xor_b32, 8, 0, 0, , REGS(1, 2), REGS(0)),
    OP(s_xor_saveexec_b64, 7, 0, 0, , REGS(1), REGS(0)),
    OP(scratch_load_dword, 2, 0, 0, , REGS(1, 2), REGS(0)),
    OP(scratch_load_dwordx2, 2, 0, 0, , REGS(1, 2), REGS(0)),
    OP(scratch_load_dwordx3, 2, 0, 0, , REGS(1, 2), REGS(0)),
    OP(scratch_load_dwordx4, 2, 0, 0, , REGS(1, 2), REGS(0)),
    OP(scratch_load_sbyte, 2, 0, 0, , REGS(1, 2), REGS(0)),
    OP(scratch_load_sbyte_d16, 2, 0, 0, , REGS(1, 2), REGS(0)),
    OP(scratch_load_sbyte_d16_hi, 2, 0, 0, , REGS(1, 2), REGS(0)),
    OP(scratch_load_short_d16, 2, 0, 0, , REGS(1, 2), REGS(0)),
    OP(scratch_load_short_d16_hi, 2, 0, 0, , REGS(1, 2), REGS(0)),
    OP(scratch_load_sshort, 2, 0, 0, , REGS(1, 2), REGS(0)),
    OP(scratch_load_ubyte, 2, 0, 0, , REGS(1, 2), REGS(0)),
    OP(scratch_load_ubyte_d16, 2, 0, 0, , REGS(1, 2), REGS(0)),
    OP(scratch_load_ubyte_d16_hi, 2, 0, 0, , REGS(1, 2), REGS(0)),
    OP(scratch_load_ushort, 2, 0, 0, , REGS(1, 2), REGS(0)),
    OP(scratch_store_byte, 2, 0, 0, , REGS(0, 1, 2), REGS()),
    OP(scratch_store_byte_d16_hi, 2, 0, 0, , REGS(0, 1, 2), REGS()),
    OP(scratch_store_dword, 2, 0, 0, , REGS(0, 1, 2), REGS()),
    OP(scratch_store_dwordx2, 2, 0, 0, , REGS(0, 1, 2), REGS()),
    OP(scratch_store_dwordx3, 2, 0, 0, , REGS(0, 1, 2), REGS()),
    OP(scratch_store_dwordx4, 2, 0, 0, , REGS(0, 1, 2), REGS()),
    OP(scratch_store_short, 2, 0, 0, , REGS(0, 1, 2), REGS()),
    OP(scratch_store_short_d16_hi, 2, 0, 0, , REGS(0, 1, 2), REGS()),
    OP(tbuffer_load_format_d16_x, 4, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(tbuffer_load_format_d16_xy, 4, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(tbuffer_load_format_d16_xyz, 4, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(tbuffer_load_format_d16_xyzw, 4, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(tbuffer_load_format_x, 4, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(tbuffer_load_format_xy, 4, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(tbuffer_load_format_xyz, 4, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(tbuffer_load_format_xyzw, 4, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(tbuffer_store_format_d16_x, 4, 0, 0, , REGS(0, 1, 2, 3), REGS()),
    OP(tbuffer_store_format_d16_xy, 4, 0, 0, , REGS(0, 1, 2, 3), REGS()),
    OP(tbuffer_store_format_d16_xyz, 4, 0, 0, , REGS(0, 1, 2, 3), REGS()),
    OP(tbuffer_store_format_d16_xyzw, 4, 0, 0, , REGS(0, 1, 2, 3), REGS()),
    OP(tbuffer_store_format_x, 4, 0, 0, , REGS(0, 1, 2, 3), REGS()),
    OP(tbuffer_store_format_xy, 4, 0, 0, , REGS(0, 1, 2, 3), REGS()),
    OP(tbuffer_store_format_xyz, 4, 0, 0, , REGS(0, 1, 2, 3), REGS()),
    OP(tbuffer_store_format_xyzw, 4, 0, 0, , REGS(0, 1, 2, 3), REGS()),
    OP(v_add3_u32, 15, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_add_co_u32, 14, 0, 0, , REGS(2, 3), REGS(0, 1)),
    OP(v_add_f16, 14, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_add_f32, 14, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_add_f64, 15, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_add_i16, 15, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_add_i32, 15, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_add_lshl_u32, 15, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_add_u16, 14, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_add_u32, 14, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_addc_co_u32, 14, 0, 0, , REGS(2, 3, 4), REGS(0, 1)),
    OP(v_addc_u32, 14, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_alignbit_b32, 15, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_alignbyte_b32, 15, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_and_b32, 14, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_and_or_b32, 15, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_ashr_i32, 14, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_ashr_i64, 15, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_ashrrev_i16, 14, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_ashrrev_i32, 14, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_ashrrev_i64, 15, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_bcnt_u32_b32, 15, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_bfe_i32, 15, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_bfe_u32, 15, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_bfi_b32, 15, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_bfm_b32, 15, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_bfrev_b32, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_ceil_f16, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_ceil_f32, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_ceil_f64, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_clrexcp, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_cmp_class_f16, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_class_f32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_class_f64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_eq_f16, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_eq_f32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_eq_f64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_eq_i16, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_eq_i32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_eq_i64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_eq_u16, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_eq_u32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_eq_u64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_f_f16, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_f_f32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_f_f64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_f_i16, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_f_i32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_f_i64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_f_u16, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_f_u32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_f_u64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_ge_f16, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_ge_f32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_ge_f64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_ge_i16, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_ge_i32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_ge_i64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_ge_u16, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_ge_u32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_ge_u64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_gt_f16, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_gt_f32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_gt_f64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_gt_i16, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_gt_i32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_gt_i64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_gt_u16, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_gt_u32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_gt_u64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_le_f16, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_le_f32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_le_f64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_le_i16, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_le_i32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_le_i64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_le_u16, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_le_u32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_le_u64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_lg_f16, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_lg_f32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_lg_f64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_lt_f16, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_lt_f32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_lt_f64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_lt_i16, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_lt_i32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_lt_i64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_lt_u16, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_lt_u32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_lt_u64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_ne_i16, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_ne_i32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_ne_i64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_ne_u16, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_ne_u32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_ne_u64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_neq_f16, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_neq_f32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_neq_f64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_nge_f16, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_nge_f32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_nge_f64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_ngt_f16, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_ngt_f32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_ngt_f64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_nle_f16, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_nle_f32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_nle_f64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_nlg_f16, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_nlg_f32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_nlg_f64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_nlt_f16, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_nlt_f32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_nlt_f64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_o_f16, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_o_f32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_o_f64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_t_i16, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_t_i32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_t_i64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_t_u16, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_t_u32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_t_u64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_tru_f16, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_tru_f32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_tru_f64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_u_f16, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_u_f32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmp_u_f64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmps_eq_f32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmps_eq_f64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmps_f_f32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmps_f_f64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmps_ge_f32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmps_ge_f64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmps_gt_f32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmps_gt_f64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmps_le_f32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmps_le_f64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmps_lg_f32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmps_lg_f64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmps_lt_f32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmps_lt_f64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmps_neq_f32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmps_neq_f64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmps_nge_f32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmps_nge_f64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmps_ngt_f32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmps_ngt_f64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmps_nle_f32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmps_nle_f64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmps_nlg_f32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmps_nlg_f64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmps_nlt_f32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmps_nlt_f64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmps_o_f32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmps_o_f64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmps_tru_f32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmps_tru_f64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmps_u_f32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmps_u_f64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpsx_eq_f32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpsx_eq_f64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpsx_f_f32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpsx_f_f64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpsx_ge_f32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpsx_ge_f64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpsx_gt_f32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpsx_gt_f64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpsx_le_f32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpsx_le_f64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpsx_lg_f32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpsx_lg_f64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpsx_lt_f32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpsx_lt_f64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpsx_neq_f32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpsx_neq_f64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpsx_nge_f32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpsx_nge_f64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpsx_ngt_f32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpsx_ngt_f64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpsx_nle_f32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpsx_nle_f64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpsx_nlg_f32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpsx_nlg_f64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpsx_nlt_f32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpsx_nlt_f64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpsx_o_f32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpsx_o_f64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpsx_tru_f32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpsx_tru_f64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpsx_u_f32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpsx_u_f64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_class_f16, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_class_f32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_class_f64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_eq_f16, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_eq_f32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_eq_f64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_eq_i16, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_eq_i32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_eq_i64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_eq_u16, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_eq_u32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_eq_u64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_f_f16, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_f_f32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_f_f64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_f_i16, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_f_i32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_f_i64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_f_u16, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_f_u32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_f_u64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_ge_f16, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_ge_f32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_ge_f64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_ge_i16, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_ge_i32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_ge_i64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_ge_u16, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_ge_u32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_ge_u64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_gt_f16, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_gt_f32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_gt_f64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_gt_i16, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_gt_i32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_gt_i64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_gt_u16, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_gt_u32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_gt_u64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_le_f16, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_le_f32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_le_f64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_le_i16, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_le_i32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_le_i64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_le_u16, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_le_u32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_le_u64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_lg_f16, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_lg_f32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_lg_f64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_lt_f16, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_lt_f32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_lt_f64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_lt_i16, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_lt_i32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_lt_i64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_lt_u16, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_lt_u32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_lt_u64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_ne_i16, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_ne_i32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_ne_i64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_ne_u16, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_ne_u32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_ne_u64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_neq_f16, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_neq_f32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_neq_f64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_nge_f16, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_nge_f32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_nge_f64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_ngt_f16, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_ngt_f32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_ngt_f64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_nle_f16, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_nle_f32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_nle_f64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_nlg_f16, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_nlg_f32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_nlg_f64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_nlt_f16, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_nlt_f32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_nlt_f64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_o_f16, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_o_f32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_o_f64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_t_i16, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_t_i32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_t_i64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_t_u16, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_t_u32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_t_u64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_tru_f16, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_tru_f32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_tru_f64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_u_f16, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_u_f32, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_u_f64, 17, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cndmask_b32, 14, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_cos_f16, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_cos_f32, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_cubeid_f32, 15, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_cubema_f32, 15, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_cubesc_f32, 15, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_cubetc_f32, 15, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_cvt_f16_f32, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_cvt_f16_i16, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_cvt_f16_u16, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_cvt_f32_f16, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_cvt_f32_f64, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_cvt_f32_i32, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_cvt_f32_u32, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_cvt_f32_ubyte0, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_cvt_f32_ubyte1, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_cvt_f32_ubyte2, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_cvt_f32_ubyte3, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_cvt_f64_f32, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_cvt_f64_i32, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_cvt_f64_u32, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_cvt_flr_i32_f32, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_cvt_i16_f16, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_cvt_i32_f32, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_cvt_i32_f64, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_cvt_norm_i16_f16, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_cvt_norm_u16_f16, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_cvt_off_f32_i4, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_cvt_pk_i16_i32, 15, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cvt_pk_u16_u32, 15, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cvt_pk_u8_f32, 15, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_cvt_pkaccum_u8_f32, 15, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cvt_pknorm_i16_f16, 15, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cvt_pknorm_i16_f32, 15, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cvt_pknorm_u16_f16, 15, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cvt_pknorm_u16_f32, 15, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cvt_pkrtz_f16_f32, 15, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_cvt_rpi_i32_f32, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_cvt_u16_f16, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_cvt_u32_f32, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_cvt_u32_f64, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_div_fixup_f16, 15, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_div_fixup_f32, 15, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_div_fixup_f64, 15, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_div_fixup_legacy_f16, 15, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_div_fmas_f32, 15, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_div_fmas_f64, 15, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_div_scale_f32, 15, 0, 0, , REGS(2, 3, 4), REGS(0, 1)),
    OP(v_div_scale_f64, 15, 0, 0, , REGS(2, 3, 4), REGS(0, 1)),
    OP(v_dot2_f32_f16, 16, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_dot2_i32_i16, 16, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_dot2_i32_i16_i8, 16, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_dot2_u32_u16, 16, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_dot2_u32_u16_u8, 16, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_dot2c_f32_f16, 14, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_dot2c_i32_i16, 14, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_dot4_i32_i8, 16, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_dot4_u32_u8, 16, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_dot4c_i32_i8, 14, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_dot8_i32_i4, 16, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_dot8_u32_u4, 16, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_dot8c_i32_i4, 14, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_exp_f16, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_exp_f32, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_exp_legacy_f32, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_ffbh_i32, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_ffbh_u32, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_ffbl_b32, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_floor_f16, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_floor_f32, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_floor_f64, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_fma_f16, 15, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_fma_f32, 15, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_fma_f64, 15, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_fma_legacy_f16, 15, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_fmac_f32, 14, 0, 0, , REGS(0, 1, 2), REGS(0)),
    OP(v_fract_f16, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_fract_f32, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_fract_f64, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_frexp_exp_i16_f16, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_frexp_exp_i32_f32, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_frexp_exp_i32_f64, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_frexp_mant_f16, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_frexp_mant_f32, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_frexp_mant_f64, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_interp_mov_f32, 12, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_interp_p1_f32, 12, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_interp_p1ll_f16, 15, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_interp_p1lv_f16, 15, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_interp_p2_f16, 15, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_interp_p2_f32, 12, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_interp_p2_legacy_f16, 15, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_ldexp_f16, 14, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_ldexp_f32, 15, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_ldexp_f64, 15, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_lerp_u8, 15, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_log_clamp_f32, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_log_f16, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_log_f32, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_log_legacy_f32, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_lshl_add_u32, 15, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_lshl_b32, 14, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_lshl_b64, 15, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_lshl_or_b32, 15, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_lshlrev_b16, 14, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_lshlrev_b32, 14, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_lshlrev_b64, 15, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_lshr_b32, 14, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_lshr_b64, 15, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_lshrrev_b16, 14, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_lshrrev_b32, 14, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_mac_f16, 14, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_mac_f32, 14, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_mac_legacy_f32, 15, 0, 0, , REGS(0, 1, 2), REGS(0)),
    OP(v_mad_f16, 15, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_mad_f32, 15, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_mad_i16, 15, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_mad_i32_i16, 15, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_mad_i32_i24, 15, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_mad_i64_i32, 15, 0, 0, , REGS(2, 3, 4), REGS(0, 1)),
    OP(v_mad_legacy_f16, 15, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_mad_legacy_f32, 15, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_mad_legacy_i16, 15, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_mad_legacy_u16, 15, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_mad_mix_f32, 16, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_mad_mixhi_f16, 16, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_mad_mixlo_f16, 16, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_mad_u16, 15, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_mad_u32_u16, 15, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_mad_u32_u24, 15, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_mad_u64_u32, 15, 0, 0, , REGS(2, 3, 4), REGS(0, 1)),
    OP(v_madak_f16, 14, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_madak_f32, 14, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_madmk_f16, 14, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_madmk_f32, 14, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_max3_f16, 15, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_max3_f32, 15, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_max3_i16, 15, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_max3_i32, 15, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_max3_u16, 15, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_max3_u32, 15, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_max_f16, 14, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_max_f32, 14, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_max_f64, 15, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_max_i16, 14, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_max_i32, 14, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_max_legacy_f32, 14, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_max_u16, 14, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_max_u32, 14, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_mbcnt_hi_u32_b32, 15, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_mbcnt_lo_u32_b32, 15, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_med3_f16, 15, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_med3_f32, 15, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_med3_i16, 15, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_med3_i32, 15, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_med3_u16, 15, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_med3_u32, 15, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_min3_f16, 15, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_min3_f32, 15, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_min3_i16, 15, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_min3_i32, 15, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_min3_u16, 15, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_min3_u32, 15, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_min_f16, 14, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_min_f32, 14, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_min_f64, 15, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_min_i16, 14, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_min_i32, 14, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_min_legacy_f32, 14, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_min_u16, 14, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_min_u32, 14, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_mov_fed_b32, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_mov_prsv_b32, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_movreld_b32, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_movrels_b32, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_movrelsd_b32, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_mqsad_pk_u16_u8, 15, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_mqsad_u32_u8, 15, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_mqsad_u8, 15, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_msad_u8, 15, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_mul_f16, 14, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_mul_f32, 14, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_mul_f64, 15, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_mul_hi_i32, 15, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_mul_hi_i32_i24, 14, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_mul_hi_u32, 15, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_mul_hi_u32_u24, 14, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_mul_i32_i24, 14, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_mul_legacy_f32, 14, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_mul_lo_i32, 15, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_mul_lo_u16, 14, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_mul_lo_u32, 15, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_mul_u32_u24, 14, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_mullit_f32, 15, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_nop, 13, 0, 0, , REGS(), REGS()),
    OP(v_not_b32, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_or3_b32, 15, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_or_b32, 14, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_pack_b32_f16, 15, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_perm_b32, 15, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_pk_add_f16, 16, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_pk_add_i16, 16, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_pk_add_u16, 16, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_pk_ashrrev_i16, 16, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_pk_fma_f16, 16, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_pk_fmac_f16, 14, 0, 0, , REGS(0, 1, 2), REGS(0)),
    OP(v_pk_lshlrev_b16, 16, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_pk_lshrrev_b16, 16, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_pk_mad_i16, 16, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_pk_mad_u16, 16, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_pk_max_f16, 16, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_pk_max_i16, 16, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_pk_max_u16, 16, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_pk_min_f16, 16, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_pk_min_i16, 16, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_pk_min_u16, 16, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_pk_mul_f16, 16, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_pk_mul_lo_u16, 16, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_pk_sub_i16, 16, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_pk_sub_u16, 16, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_qsad_pk_u16_u8, 15, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_qsad_u8, 15, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_rcp_clamp_f32, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_rcp_clamp_f64, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_rcp_f16, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_rcp_f32, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_rcp_f64, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_rcp_iflag_f32, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_rcp_legacy_f32, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_readfirstlane_b32, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_readlane_b32, 15, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_readlane_regrd_b32, 15, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_rndne_f16, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_rndne_f32, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_rndne_f64, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_rsq_clamp_f32, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_rsq_clamp_f64, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_rsq_f16, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_rsq_f32, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_rsq_f64, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_rsq_legacy_f32, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_sad_hi_u8, 15, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_sad_u16, 15, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_sad_u32, 15, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_sad_u8, 15, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_sat_pk_u8_i16, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_screen_partition_4se_b32, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_sin_f16, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_sin_f32, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_sqrt_f16, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_sqrt_f32, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_sqrt_f64, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_sub_co_u32, 14, 0, 0, , REGS(2, 3), REGS(0, 1)),
    OP(v_sub_f16, 14, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_sub_f32, 14, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_sub_i16, 15, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_sub_i32, 15, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_sub_u16, 14, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_sub_u32, 14, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_subb_co_u32, 14, 0, 0, , REGS(2, 3, 4), REGS(0, 1)),
    OP(v_subb_u32, 14, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_subbrev_co_u32, 14, 0, 0, , REGS(2, 3, 4), REGS(0, 1)),
    OP(v_subbrev_u32, 14, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_subrev_co_u32, 14, 0, 0, , REGS(2, 3), REGS(0, 1)),
    OP(v_subrev_f16, 14, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_subrev_f32, 14, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_subrev_i32, 14, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_subrev_u16, 14, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_subrev_u32, 14, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_swap_b32, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_trig_preop_f64, 15, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_trunc_f16, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_trunc_f32, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_trunc_f64, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_writelane_b32, 15, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_writelane_regwr_b32, 13, 0, 0, , REGS(1), REGS(0)),
    OP(v_xad_u32, 15, 0, 0, , REGS(1, 2, 3), REGS(0)),
    OP(v_xnor_b32, 14, 0, 0, , REGS(1, 2), REGS(0)),
    OP(v_xor_b32, 14, 0, 0, , REGS(1, 2), REGS(0)),
    OP(ds_add_read_f32, 20, 0, 1, , REGS(0), REGS()),
    OP(ds_add_read_u32, 20, 0, 1, , REGS(0), REGS()),
    OP(ds_add_read_u64, 20, 0, 1, , REGS(0), REGS()),
    OP(ds_and_read_b32, 20, 0, 1, , REGS(0), REGS()),
    OP(ds_and_read_b64, 20, 0, 1, , REGS(0), REGS()),
    OP(ds_dec_read_u32, 20, 0, 1, , REGS(0), REGS()),
    OP(ds_dec_read_u64, 20, 0, 1, , REGS(0), REGS()),
    OP(ds_inc_read_u32, 20, 0, 1, , REGS(0), REGS()),
    OP(ds_inc_read_u64, 20, 0, 1, , REGS(0), REGS()),
    OP(ds_max_read_f32, 20, 0, 1, , REGS(0), REGS()),
    OP(ds_max_read_f64, 20, 0, 1, , REGS(0), REGS()),
    OP(ds_max_read_i32, 20, 0, 1, , REGS(0), REGS()),
    OP(ds_max_read_i64, 20, 0, 1, , REGS(0), REGS()),
    OP(ds_max_read_u32, 20, 0, 1, , REGS(0), REGS()),
    OP(ds_max_read_u64, 20, 0, 1, , REGS(0), REGS()),
    OP(ds_min_read_f32, 20, 0, 1, , REGS(0), REGS()),
    OP(ds_min_read_f64, 20, 0, 1, , REGS(0), REGS()),
    OP(ds_min_read_i32, 20, 0, 1, , REGS(0), REGS()),
    OP(ds_min_read_i64, 20, 0, 1, , REGS(0), REGS()),
    OP(ds_min_read_u32, 20, 0, 1, , REGS(0), REGS()),
    OP(ds_min_read_u64, 20, 0, 1, , REGS(0), REGS()),
    OP(ds_or_read_b32, 20, 0, 1, , REGS(0), REGS()),
    OP(ds_or_read_b64, 20, 0, 1, , REGS(0), REGS()),
    OP(ds_rsub_read_u32, 20, 0, 1, , REGS(0), REGS()),
    OP(ds_rsub_read_u64, 20, 0, 1, , REGS(0), REGS()),
    OP(ds_sub_read_u32, 20, 0, 1, , REGS(0), REGS()),
    OP(ds_sub_read_u64, 20, 0, 1, , REGS(0), REGS()),
    OP(ds_write_read_b32, 20, 0, 1, , REGS(0), REGS()),
    OP(ds_write_read_b64, 20, 0, 1, , REGS(0), REGS()),
    OP(ds_xor_read_b32, 20, 0, 1, , REGS(0), REGS()),
    OP(ds_xor_read_b64, 20, 0, 1, , REGS(0), REGS()),
    OP(v_bfrev_b32_dpp, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_bfrev_b32_sdwa, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_ceil_f16_dpp, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_ceil_f16_sdwa, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_ceil_f32_dpp, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_ceil_f32_sdwa, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_cos_f16_dpp, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_cos_f16_sdwa, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_cos_f32_dpp, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_cos_f32_sdwa, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_cvt_f16_f32_dpp, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_cvt_f16_f32_sdwa, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_cvt_f16_i16_dpp, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_cvt_f16_i16_sdwa, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_cvt_f16_u16_dpp, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_cvt_f16_u16_sdwa, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_cvt_f32_f16_dpp, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_cvt_f32_f16_sdwa, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_cvt_f32_i32_dpp, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_cvt_f32_i32_sdwa, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_cvt_f32_u32_dpp, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_cvt_f32_u32_sdwa, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_cvt_f32_ubyte0_dpp, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_cvt_f32_ubyte0_sdwa, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_cvt_f32_ubyte1_dpp, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_cvt_f32_ubyte1_sdwa, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_cvt_f32_ubyte2_dpp, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_cvt_f32_ubyte2_sdwa, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_cvt_f32_ubyte3_dpp, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_cvt_f32_ubyte3_sdwa, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_cvt_flr_i32_f32_dpp, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_cvt_flr_i32_f32_sdwa, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_cvt_i16_f16_dpp, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_cvt_i16_f16_sdwa, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_cvt_i32_f32_dpp, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_cvt_i32_f32_sdwa, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_cvt_norm_i16_f16_dpp, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_cvt_norm_i16_f16_sdwa, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_cvt_norm_u16_f16_dpp, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_cvt_norm_u16_f16_sdwa, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_cvt_off_f32_i4_dpp, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_cvt_off_f32_i4_sdwa, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_cvt_rpi_i32_f32_dpp, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_cvt_rpi_i32_f32_sdwa, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_cvt_u16_f16_dpp, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_cvt_u16_f16_sdwa, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_cvt_u32_f32_dpp, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_cvt_u32_f32_sdwa, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_exp_f16_dpp, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_exp_f16_sdwa, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_exp_f32_dpp, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_exp_f32_sdwa, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_exp_legacy_f32_dpp, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_exp_legacy_f32_sdwa, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_ffbh_i32_dpp, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_ffbh_i32_sdwa, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_ffbh_u32_dpp, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_ffbh_u32_sdwa, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_ffbl_b32_dpp, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_ffbl_b32_sdwa, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_floor_f16_dpp, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_floor_f16_sdwa, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_floor_f32_dpp, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_floor_f32_sdwa, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_fract_f16_dpp, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_fract_f16_sdwa, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_fract_f32_dpp, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_fract_f32_sdwa, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_frexp_exp_i16_f16_dpp, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_frexp_exp_i16_f16_sdwa, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_frexp_exp_i32_f32_dpp, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_frexp_exp_i32_f32_sdwa, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_frexp_mant_f16_dpp, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_frexp_mant_f16_sdwa, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_frexp_mant_f32_dpp, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_frexp_mant_f32_sdwa, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_log_f16_dpp, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_log_f16_sdwa, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_log_f32_dpp, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_log_f32_sdwa, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_log_legacy_f32_dpp, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_log_legacy_f32_sdwa, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_mov_b32_dpp, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_mov_b32_sdwa, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_mov_fed_b32_dpp, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_mov_fed_b32_sdwa, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_not_b32_dpp, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_not_b32_sdwa, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_rcp_f16_dpp, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_rcp_f16_sdwa, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_rcp_f32_dpp, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_rcp_f32_sdwa, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_rcp_iflag_f32_dpp, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_rcp_iflag_f32_sdwa, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_rndne_f16_dpp, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_rndne_f16_sdwa, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_rndne_f32_dpp, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_rndne_f32_sdwa, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_rsq_f16_dpp, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_rsq_f16_sdwa, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_rsq_f32_dpp, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_rsq_f32_sdwa, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_sat_pk_u8_i16_dpp, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_sat_pk_u8_i16_sdwa, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_screen_partition_4se_b32_dpp, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_screen_partition_4se_b32_sdwa, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_sin_f16_dpp, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_sin_f16_sdwa, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_sin_f32_dpp, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_sin_f32_sdwa, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_sqrt_f16_dpp, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_sqrt_f16_sdwa, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_sqrt_f32_dpp, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_sqrt_f32_sdwa, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_trunc_f16_dpp, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_trunc_f16_sdwa, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_trunc_f32_dpp, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_trunc_f32_sdwa, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_add_co_u32_dpp, 20, 0, 1, , REGS(2, 3), REGS(0, 1)),
    OP(v_add_co_u32_sdwa, 20, 0, 1, , REGS(2, 3), REGS(0, 1)),
    OP(v_add_f16_dpp, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_add_f16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_add_f32_dpp, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_add_f32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_add_u16_dpp, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_add_u16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_add_u32_dpp, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_add_u32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_addc_co_u32_dpp, 20, 0, 1, , REGS(2, 3, 4), REGS(0, 1)),
    OP(v_addc_co_u32_sdwa, 20, 0, 1, , REGS(2, 3, 4), REGS(0, 1)),
    OP(v_and_b32_dpp, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_and_b32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_ashrrev_i16_dpp, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_ashrrev_i16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_ashrrev_i32_dpp, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_ashrrev_i32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cndmask_b32_dpp, 20, 0, 1, , REGS(1, 2, 3), REGS(0)),
    OP(v_cndmask_b32_sdwa, 20, 0, 1, , REGS(1, 2, 3), REGS(0)),
    OP(v_ldexp_f16_dpp, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_ldexp_f16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_lshlrev_b16_dpp, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_lshlrev_b16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_lshlrev_b32_dpp, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_lshlrev_b32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_lshrrev_b16_dpp, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_lshrrev_b16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_lshrrev_b32_dpp, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_lshrrev_b32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_mac_f16_dpp, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_mac_f32_dpp, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_max_f16_dpp, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_max_f16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_max_f32_dpp, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_max_f32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_max_i16_dpp, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_max_i16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_max_i32_dpp, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_max_i32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_max_u16_dpp, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_max_u16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_max_u32_dpp, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_max_u32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_min_f16_dpp, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_min_f16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_min_f32_dpp, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_min_f32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_min_i16_dpp, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_min_i16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_min_i32_dpp, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_min_i32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_min_u16_dpp, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_min_u16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_min_u32_dpp, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_min_u32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_mul_f16_dpp, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_mul_f16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_mul_f32_dpp, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_mul_f32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_mul_hi_i32_i24_dpp, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_mul_hi_i32_i24_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_mul_hi_u32_u24_dpp, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_mul_hi_u32_u24_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_mul_i32_i24_dpp, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_mul_i32_i24_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_mul_legacy_f32_dpp, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_mul_legacy_f32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_mul_lo_u16_dpp, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_mul_lo_u16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_mul_u32_u24_dpp, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_mul_u32_u24_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_or_b32_dpp, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_or_b32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_sub_co_u32_dpp, 20, 0, 1, , REGS(2, 3), REGS(0, 1)),
    OP(v_sub_co_u32_sdwa, 20, 0, 1, , REGS(2, 3), REGS(0, 1)),
    OP(v_sub_f16_dpp, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_sub_f16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_sub_f32_dpp, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_sub_f32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_sub_u16_dpp, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_sub_u16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_sub_u32_dpp, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_sub_u32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_subb_co_u32_dpp, 20, 0, 1, , REGS(2, 3, 4), REGS(0, 1)),
    OP(v_subb_co_u32_sdwa, 20, 0, 1, , REGS(2, 3, 4), REGS(0, 1)),
    OP(v_subbrev_co_u32_dpp, 20, 0, 1, , REGS(2, 3, 4), REGS(0, 1)),
    OP(v_subbrev_co_u32_sdwa, 20, 0, 1, , REGS(2, 3, 4), REGS(0, 1)),
    OP(v_subrev_co_u32_dpp, 20, 0, 1, , REGS(2, 3), REGS(0, 1)),
    OP(v_subrev_co_u32_sdwa, 20, 0, 1, , REGS(2, 3), REGS(0, 1)),
    OP(v_subrev_f16_dpp, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_subrev_f16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_subrev_f32_dpp, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_subrev_f32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_subrev_u16_dpp, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_subrev_u16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_subrev_u32_dpp, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_subrev_u32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_xor_b32_dpp, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_xor_b32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_add_co_u32_e64, 20, 0, 1, , REGS(2, 3), REGS(0, 1)),
    OP(v_add_f16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_add_f32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_add_u16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_add_u32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_addc_co_u32_e64, 20, 0, 1, , REGS(2, 3, 4), REGS(0, 1)),
    OP(v_and_b32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_ashrrev_i16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_ashrrev_i32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_bfrev_b32_e64, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_ceil_f16_e64, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_ceil_f32_e64, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_ceil_f64_e64, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_cmp_class_f16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_class_f32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_class_f64_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_eq_f16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_eq_f32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_eq_f64_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_eq_i16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_eq_i32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_eq_i64_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_eq_u16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_eq_u32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_eq_u64_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_f_f16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_f_f32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_f_f64_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_f_i16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_f_i32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_f_i64_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_f_u16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_f_u32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_f_u64_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_ge_f16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_ge_f32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_ge_f64_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_ge_i16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_ge_i32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_ge_i64_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_ge_u16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_ge_u32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_ge_u64_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_gt_f16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_gt_f32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_gt_f64_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_gt_i16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_gt_i32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_gt_i64_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_gt_u16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_gt_u32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_gt_u64_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_le_f16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_le_f32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_le_f64_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_le_i16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_le_i32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_le_i64_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_le_u16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_le_u32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_le_u64_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_lg_f16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_lg_f32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_lg_f64_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_lt_f16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_lt_f32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_lt_f64_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_lt_i16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_lt_i64_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_lt_u16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_lt_u32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_lt_u64_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_ne_i16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_ne_i32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_ne_i64_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_ne_u16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_ne_u32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_ne_u64_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_neq_f16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_neq_f32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_neq_f64_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_nge_f16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_nge_f32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_nge_f64_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_ngt_f16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_ngt_f32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_ngt_f64_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_nle_f16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_nle_f32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_nle_f64_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_nlg_f16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_nlg_f32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_nlg_f64_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_nlt_f16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_nlt_f32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_nlt_f64_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_o_f16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_o_f32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_o_f64_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_t_i16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_t_i32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_t_i64_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_t_u16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_t_u32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_t_u64_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_tru_f16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_tru_f32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_tru_f64_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_u_f16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_u_f32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_u_f64_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_class_f16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_class_f32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_class_f64_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_eq_f16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_eq_f32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_eq_f64_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_eq_i16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_eq_i32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_eq_i64_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_eq_u16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_eq_u32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_eq_u64_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_f_f16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_f_f32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_f_f64_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_f_i16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_f_i32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_f_i64_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_f_u16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_f_u32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_f_u64_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_ge_f16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_ge_f32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_ge_f64_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_ge_i16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_ge_i32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_ge_i64_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_ge_u16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_ge_u32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_ge_u64_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_gt_f16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_gt_f32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_gt_f64_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_gt_i16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_gt_i32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_gt_i64_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_gt_u16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_gt_u32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_gt_u64_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_le_f16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_le_f32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_le_f64_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_le_i16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_le_i32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_le_i64_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_le_u16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_le_u32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_le_u64_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_lg_f16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_lg_f32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_lg_f64_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_lt_f16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_lt_f32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_lt_f64_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_lt_i16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_lt_i32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_lt_i64_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_lt_u16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_lt_u32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_lt_u64_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_ne_i16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_ne_i32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_ne_i64_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_ne_u16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_ne_u32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_ne_u64_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_neq_f16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_neq_f32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_neq_f64_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_nge_f16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_nge_f32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_nge_f64_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_ngt_f16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_ngt_f32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_ngt_f64_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_nle_f16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_nle_f32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_nle_f64_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_nlg_f16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_nlg_f32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_nlg_f64_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_nlt_f16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_nlt_f32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_nlt_f64_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_o_f16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_o_f32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_o_f64_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_t_i16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_t_i32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_t_i64_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_t_u16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_t_u32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_t_u64_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_tru_f16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_tru_f32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_tru_f64_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_u_f16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_u_f32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_u_f64_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cos_f16_e64, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_cos_f32_e64, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_cvt_f16_f32_e64, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_cvt_f16_i16_e64, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_cvt_f16_u16_e64, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_cvt_f32_f16_e64, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_cvt_f32_f64_e64, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_cvt_f32_i32_e64, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_cvt_f32_u32_e64, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_cvt_f32_ubyte0_e64, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_cvt_f32_ubyte1_e64, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_cvt_f32_ubyte2_e64, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_cvt_f32_ubyte3_e64, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_cvt_f64_f32_e64, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_cvt_f64_i32_e64, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_cvt_f64_u32_e64, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_cvt_flr_i32_f32_e64, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_cvt_i16_f16_e64, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_cvt_i32_f32_e64, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_cvt_i32_f64_e64, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_cvt_norm_i16_f16_e64, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_cvt_norm_u16_f16_e64, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_cvt_off_f32_i4_e64, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_cvt_rpi_i32_f32_e64, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_cvt_u16_f16_e64, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_cvt_u32_f32_e64, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_cvt_u32_f64_e64, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_exp_f16_e64, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_exp_f32_e64, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_exp_legacy_f32_e64, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_ffbh_i32_e64, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_ffbh_u32_e64, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_ffbl_b32_e64, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_floor_f16_e64, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_floor_f32_e64, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_floor_f64_e64, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_fract_f16_e64, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_fract_f32_e64, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_fract_f64_e64, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_frexp_exp_i16_f16_e64, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_frexp_exp_i32_f32_e64, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_frexp_exp_i32_f64_e64, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_frexp_mant_f16_e64, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_frexp_mant_f32_e64, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_frexp_mant_f64_e64, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_interp_mov_f32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_interp_p1_f32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_interp_p2_f32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_ldexp_f16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_log_f16_e64, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_log_f32_e64, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_log_legacy_f32_e64, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_lshlrev_b16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_lshlrev_b32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_lshrrev_b16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_lshrrev_b32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_mac_f16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_mac_f32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_max_f16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_max_f32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_max_i16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_max_i32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_max_u16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_max_u32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_min_f16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_min_f32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_min_i16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_min_i32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_min_u16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_min_u32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_mov_b32_e64, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_mov_fed_b32_e64, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_mul_f16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_mul_f32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_mul_hi_i32_i24_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_mul_hi_u32_u24_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_mul_i32_i24_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_mul_legacy_f32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_mul_lo_u16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_mul_u32_u24_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_not_b32_e64, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_or_b32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_rcp_f16_e64, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_rcp_f32_e64, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_rcp_f64_e64, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_rcp_iflag_f32_e64, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_rndne_f16_e64, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_rndne_f32_e64, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_rndne_f64_e64, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_rsq_f16_e64, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_rsq_f32_e64, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_rsq_f64_e64, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_sat_pk_u8_i16_e64, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_screen_partition_4se_b32_e64, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_sin_f16_e64, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_sin_f32_e64, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_sqrt_f16_e64, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_sqrt_f32_e64, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_sqrt_f64_e64, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_sub_co_u32_e64, 20, 0, 1, , REGS(2, 3), REGS(0, 1)),
    OP(v_sub_f16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_sub_f32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_sub_u16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_sub_u32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_subb_co_u32_e64, 20, 0, 1, , REGS(2, 3, 4), REGS(0, 1)),
    OP(v_subbrev_co_u32_e64, 20, 0, 1, , REGS(2, 3, 4), REGS(0, 1)),
    OP(v_subrev_co_u32_e64, 20, 0, 1, , REGS(2, 3), REGS(0, 1)),
    OP(v_subrev_f16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_subrev_f32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_subrev_u16_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_subrev_u32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_trunc_f16_e64, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_trunc_f32_e64, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_trunc_f64_e64, 20, 0, 1, , REGS(1), REGS(0)),
    OP(v_xor_b32_e64, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_class_f16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_class_f32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_eq_f16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_eq_f32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_eq_i16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_eq_i32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_eq_u16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_eq_u32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_f_f16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_f_f32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_f_i16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_f_i32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_f_u16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_f_u32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_ge_f16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_ge_f32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_ge_i16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_ge_i32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_ge_u16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_ge_u32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_gt_f16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_gt_f32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_gt_i16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_gt_i32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_gt_u16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_gt_u32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_le_f16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_le_f32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_le_i16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_le_i32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_le_u16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_le_u32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_lg_f16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_lg_f32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_lt_f16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_lt_f32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_lt_i16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_lt_i32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_lt_u16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_lt_u32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_ne_i16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_ne_i32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_ne_u16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_ne_u32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_neq_f16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_neq_f32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_nge_f16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_nge_f32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_ngt_f16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_ngt_f32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_nle_f16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_nle_f32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_nlg_f16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_nlg_f32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_nlt_f16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_nlt_f32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_o_f16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_o_f32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_t_i16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_t_i32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_t_u16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_t_u32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_tru_f16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_tru_f32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_u_f16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmp_u_f32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_class_f16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_class_f32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_eq_f16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_eq_f32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_eq_i16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_eq_i32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_eq_u16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_eq_u32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_f_f16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_f_f32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_f_i16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_f_i32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_f_u16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_f_u32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_ge_f16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_ge_f32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_ge_i16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_ge_i32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_ge_u16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_ge_u32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_gt_f16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_gt_f32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_gt_i16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_gt_i32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_gt_u16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_gt_u32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_le_f16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_le_f32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_le_i16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_le_i32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_le_u16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_le_u32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_lg_f16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_lg_f32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_lt_f16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_lt_f32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_lt_i16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_lt_i32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_lt_u16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_lt_u32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_ne_i16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_ne_i32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_ne_u16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_ne_u32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_neq_f16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_neq_f32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_nge_f16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_nge_f32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_ngt_f16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_ngt_f32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_nle_f16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_nle_f32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_nlg_f16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_nlg_f32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_nlt_f16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_nlt_f32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_o_f16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_o_f32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_t_i16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_t_i32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_t_u16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_t_u32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_tru_f16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_tru_f32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_u_f16_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
    OP(v_cmpx_u_f32_sdwa, 20, 0, 1, , REGS(1, 2), REGS(0)),
};

} // namespace isa